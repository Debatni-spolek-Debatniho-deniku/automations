//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace DSDD.Automations.RBCZ.PremiumApi.Sandbox
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Client 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
        private System.Text.Json.JsonSerializerOptions _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public Client(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api.rb.cz/";
            _httpClient = httpClient;
            Initialize();
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <remarks>
        /// Get balance for given accounts.
        /// <br/>
        /// <br/>In production environment the number of requests is limited according to you  subscription plan. Therefore the consumer must be able to handle HTTP responses status 429 (too many requests) in case of exceeding these limits.
        /// </remarks>
        /// <param name="x_IBM_Client_Id">ClientID obtained from Developer Portal - when you registered your app with us.</param>
        /// <param name="x_Request_Id">Unique request id provided by consumer application for reference and auditing.</param>
        /// <param name="pSU_IP_Address">IP address of a client - the end IP address of the client application (no server) in IPv4 or IPv6 format. If the bank client (your user) uses a browser by which he accesses your server app, we need to know the IP address of his browser. Always provide the closest IP address to the real end-user possible.</param>
        /// <param name="accountNumber">The number of account without prefix and bankCode</param>
        /// <returns>Account with currencyFolders and balances.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response> GetBalanceAsync(string x_IBM_Client_Id, string x_Request_Id, string pSU_IP_Address, string accountNumber)
        {
            return GetBalanceAsync(x_IBM_Client_Id, x_Request_Id, pSU_IP_Address, accountNumber, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Get balance for given accounts.
        /// <br/>
        /// <br/>In production environment the number of requests is limited according to you  subscription plan. Therefore the consumer must be able to handle HTTP responses status 429 (too many requests) in case of exceeding these limits.
        /// </remarks>
        /// <param name="x_IBM_Client_Id">ClientID obtained from Developer Portal - when you registered your app with us.</param>
        /// <param name="x_Request_Id">Unique request id provided by consumer application for reference and auditing.</param>
        /// <param name="pSU_IP_Address">IP address of a client - the end IP address of the client application (no server) in IPv4 or IPv6 format. If the bank client (your user) uses a browser by which he accesses your server app, we need to know the IP address of his browser. Always provide the closest IP address to the real end-user possible.</param>
        /// <param name="accountNumber">The number of account without prefix and bankCode</param>
        /// <returns>Account with currencyFolders and balances.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response> GetBalanceAsync(string x_IBM_Client_Id, string x_Request_Id, string pSU_IP_Address, string accountNumber, System.Threading.CancellationToken cancellationToken)
        {
            if (accountNumber == null)
                throw new System.ArgumentNullException("accountNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_IBM_Client_Id == null)
                        throw new System.ArgumentNullException("x_IBM_Client_Id");
                    request_.Headers.TryAddWithoutValidation("X-IBM-Client-Id", ConvertToString(x_IBM_Client_Id, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_Request_Id == null)
                        throw new System.ArgumentNullException("x_Request_Id");
                    request_.Headers.TryAddWithoutValidation("X-Request-Id", ConvertToString(x_Request_Id, System.Globalization.CultureInfo.InvariantCulture));

                    if (pSU_IP_Address != null)
                        request_.Headers.TryAddWithoutValidation("PSU-IP-Address", ConvertToString(pSU_IP_Address, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rbcz/premium/mock/accounts/{accountNumber}/balance"
                    urlBuilder_.Append("rbcz/premium/mock/accounts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountNumber, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/balance");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response2>("Certificate\'s serial number is missing or certificate is in an invalid state.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response3>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response3>("Certficate is valid but user has no sufficient rights to access resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response4>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response4>("Indicates that requested resource does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response5>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response5>("User has sent too many requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Get a list of posted transactions (including intraday). In addition, transactions must not be older than **90 days** - see request parameter `from`.
        /// <br/>
        /// <br/>The list is returned as a sequence of pages - see request parameter `page`. The request parameter/flag `lastPage` indicates whether the returned page is the last one or if there are more pages that you can iterate.
        /// <br/>
        /// <br/>In production environment the number of requests is limited according to you  subscription plan. Therefore the consumer must be able to handle HTTP responses status 429 (too many requests) in case of exceeding these limits.
        /// <br/>
        /// <br/>When iterating pages of transactions, your app may need to implement  some delay in order not to break the limit of requests per second.
        /// </remarks>
        /// <param name="x_IBM_Client_Id">ClientID obtained from Developer Portal - when you registered your app with us.</param>
        /// <param name="x_Request_Id">Unique request id provided by consumer application for reference and auditing.</param>
        /// <param name="pSU_IP_Address">IP address of a client - the end IP address of the client application (no server) in IPv4 or IPv6 format. If the bank client (your user) uses a browser by which he accesses your server app, we need to know the IP address of his browser. Always provide the closest IP address to the real end-user possible.</param>
        /// <param name="accountNumber">Account number for which to get list of transactions in national format without 0 padding.</param>
        /// <param name="currencyCode">Currency code of the account in ISO-4217 standard (e.g. czk, eur, usd)</param>
        /// <param name="from">Defines date (and optionally time) from which transactions will be requested. If no time is specified then 00:00:00.0 (Central European  Time) will be used. Example values - 2021-08-01 or 2021-08-01T10:00:00.0Z</param>
        /// <param name="to">Defines date (and optionally time) until which transactions will be requested. If no time is specified then 23:59:59.999 (Central European  Time) will be used. Example values - 2021-08-02 or 2021-08-02T14:00:00.0Z</param>
        /// <param name="page">Page number to be requested. The first page is 1.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response6> GetTransactionListAsync(string x_IBM_Client_Id, string x_Request_Id, string pSU_IP_Address, string accountNumber, string currencyCode, System.DateTime from, System.DateTime to, int? page)
        {
            return GetTransactionListAsync(x_IBM_Client_Id, x_Request_Id, pSU_IP_Address, accountNumber, currencyCode, from, to, page, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Get a list of posted transactions (including intraday). In addition, transactions must not be older than **90 days** - see request parameter `from`.
        /// <br/>
        /// <br/>The list is returned as a sequence of pages - see request parameter `page`. The request parameter/flag `lastPage` indicates whether the returned page is the last one or if there are more pages that you can iterate.
        /// <br/>
        /// <br/>In production environment the number of requests is limited according to you  subscription plan. Therefore the consumer must be able to handle HTTP responses status 429 (too many requests) in case of exceeding these limits.
        /// <br/>
        /// <br/>When iterating pages of transactions, your app may need to implement  some delay in order not to break the limit of requests per second.
        /// </remarks>
        /// <param name="x_IBM_Client_Id">ClientID obtained from Developer Portal - when you registered your app with us.</param>
        /// <param name="x_Request_Id">Unique request id provided by consumer application for reference and auditing.</param>
        /// <param name="pSU_IP_Address">IP address of a client - the end IP address of the client application (no server) in IPv4 or IPv6 format. If the bank client (your user) uses a browser by which he accesses your server app, we need to know the IP address of his browser. Always provide the closest IP address to the real end-user possible.</param>
        /// <param name="accountNumber">Account number for which to get list of transactions in national format without 0 padding.</param>
        /// <param name="currencyCode">Currency code of the account in ISO-4217 standard (e.g. czk, eur, usd)</param>
        /// <param name="from">Defines date (and optionally time) from which transactions will be requested. If no time is specified then 00:00:00.0 (Central European  Time) will be used. Example values - 2021-08-01 or 2021-08-01T10:00:00.0Z</param>
        /// <param name="to">Defines date (and optionally time) until which transactions will be requested. If no time is specified then 23:59:59.999 (Central European  Time) will be used. Example values - 2021-08-02 or 2021-08-02T14:00:00.0Z</param>
        /// <param name="page">Page number to be requested. The first page is 1.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response6> GetTransactionListAsync(string x_IBM_Client_Id, string x_Request_Id, string pSU_IP_Address, string accountNumber, string currencyCode, System.DateTime from, System.DateTime to, int? page, System.Threading.CancellationToken cancellationToken)
        {
            if (accountNumber == null)
                throw new System.ArgumentNullException("accountNumber");

            if (currencyCode == null)
                throw new System.ArgumentNullException("currencyCode");

            if (from == null)
                throw new System.ArgumentNullException("from");

            if (to == null)
                throw new System.ArgumentNullException("to");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_IBM_Client_Id == null)
                        throw new System.ArgumentNullException("x_IBM_Client_Id");
                    request_.Headers.TryAddWithoutValidation("X-IBM-Client-Id", ConvertToString(x_IBM_Client_Id, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_Request_Id == null)
                        throw new System.ArgumentNullException("x_Request_Id");
                    request_.Headers.TryAddWithoutValidation("X-Request-Id", ConvertToString(x_Request_Id, System.Globalization.CultureInfo.InvariantCulture));

                    if (pSU_IP_Address != null)
                        request_.Headers.TryAddWithoutValidation("PSU-IP-Address", ConvertToString(pSU_IP_Address, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rbcz/premium/mock/accounts/{accountNumber}/{currencyCode}/transactions"
                    urlBuilder_.Append("rbcz/premium/mock/accounts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountNumber, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(currencyCode, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/transactions");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("from")).Append('=').Append(System.Uri.EscapeDataString(from.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("to")).Append('=').Append(System.Uri.EscapeDataString(to.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response6>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Nonexisting page or empty content.\n", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response7>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response7>("Bad request, validation error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response8>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response8>("Certificate is invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response9>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response9>("No access rights to perform the operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response10>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response10>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response11>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response11>("User has sent too many requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Importing batch payments in one of [supported formates](https://www.rb.cz/attachments/direct-banking/ekomunikator-datova-struktura.pdf) - see request parameter `Batch-Import-Format`.
        /// <br/>
        /// <br/>This is an API alternative to the manual import of batch payments through [Internet Banking](https://www.rb.cz/podnikatele/ucty-a-platebni-styk/prime-bankovnictvi/internetove-bankovnictvi/caste-dotazy/import-hromadnych-plateb).
        /// <br/>
        /// <br/>Imported payments are not immediately processed, they are just loaded into Internet Banking and they still must be authorized/certified in Internet Banking according to client settings of disposable rights and signatures.
        /// <br/>
        /// <br/>Once authorized/certified, uploaded payments will be processed in the Instant payments mode if the following conditions are met&amp;#58;
        /// <br/>1. the batch has no more than 100 payments
        /// <br/>2. no more than 10 batches per day were uploaded
        /// <br/>3. individual payments meet the conditions for Instant payments - see [Instant Payments](https://www.rb.cz/informacni-servis/platebni-styk/tuzemske-platby/okamzite-platby)
        /// <br/>4. on the weekend, only payments within our bank are processed as Instant payments
        /// <br/>
        /// <br/>The number of transactions in one request is limited to 15.000 (this can change without prior notice). The limit is not checked during the call,  it is performed later and a possible error is provided in Internet Banking.
        /// <br/>
        /// <br/>In production environment the number of requests is limited according to you  subscription plan. Therefore the consumer must be able to handle HTTP responses status 429 (too many requests) in case of exceeding these limits.
        /// </remarks>
        /// <param name="x_IBM_Client_Id">ClientID obtained from Developer Portal - when you registered your app with us.</param>
        /// <param name="x_Request_Id">Unique request id provided by consumer application for reference and auditing.</param>
        /// <param name="pSU_IP_Address">IP address of a client - the end IP address of the client application (no server) in IPv4 or IPv6 format. If the bank client (your user) uses a browser by which he accesses your server app, we need to know the IP address of his browser. Always provide the closest IP address to the real end-user possible.</param>
        /// <param name="batch_Import_Format">Format of imported batch. For CCT format please use option SEPA-XML.</param>
        /// <param name="batch_Name">Batch name, if not present then will be generated in format `ImportApi_&lt;DDMMYYYY&gt;`.  If the name is longer than 50 characters, it will be truncated</param>
        /// <param name="batch_Combined_Payments">Optional header for combined payments. Payments inside the import file are considered as combined in case the header is present and its value is set to 'true'.</param>
        /// <param name="batch_Autocorrect">Flag if valueDate should be autocorrected in the imported file or not. Autocorrection moved valueDate on first available valid  (working) day. Beware that this may affect if the payment will be sent as instant or not since only payments with valueDate same as actual date (during sending of payment to bank) can be sent as instant.</param>
        /// <returns>New batch with payments created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response12> ImportPaymentsAsync(string x_IBM_Client_Id, string x_Request_Id, string pSU_IP_Address, BatchImportFormat batch_Import_Format, string batch_Name, bool? batch_Combined_Payments, bool? batch_Autocorrect, string request_body)
        {
            return ImportPaymentsAsync(x_IBM_Client_Id, x_Request_Id, pSU_IP_Address, batch_Import_Format, batch_Name, batch_Combined_Payments, batch_Autocorrect, request_body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Importing batch payments in one of [supported formates](https://www.rb.cz/attachments/direct-banking/ekomunikator-datova-struktura.pdf) - see request parameter `Batch-Import-Format`.
        /// <br/>
        /// <br/>This is an API alternative to the manual import of batch payments through [Internet Banking](https://www.rb.cz/podnikatele/ucty-a-platebni-styk/prime-bankovnictvi/internetove-bankovnictvi/caste-dotazy/import-hromadnych-plateb).
        /// <br/>
        /// <br/>Imported payments are not immediately processed, they are just loaded into Internet Banking and they still must be authorized/certified in Internet Banking according to client settings of disposable rights and signatures.
        /// <br/>
        /// <br/>Once authorized/certified, uploaded payments will be processed in the Instant payments mode if the following conditions are met&amp;#58;
        /// <br/>1. the batch has no more than 100 payments
        /// <br/>2. no more than 10 batches per day were uploaded
        /// <br/>3. individual payments meet the conditions for Instant payments - see [Instant Payments](https://www.rb.cz/informacni-servis/platebni-styk/tuzemske-platby/okamzite-platby)
        /// <br/>4. on the weekend, only payments within our bank are processed as Instant payments
        /// <br/>
        /// <br/>The number of transactions in one request is limited to 15.000 (this can change without prior notice). The limit is not checked during the call,  it is performed later and a possible error is provided in Internet Banking.
        /// <br/>
        /// <br/>In production environment the number of requests is limited according to you  subscription plan. Therefore the consumer must be able to handle HTTP responses status 429 (too many requests) in case of exceeding these limits.
        /// </remarks>
        /// <param name="x_IBM_Client_Id">ClientID obtained from Developer Portal - when you registered your app with us.</param>
        /// <param name="x_Request_Id">Unique request id provided by consumer application for reference and auditing.</param>
        /// <param name="pSU_IP_Address">IP address of a client - the end IP address of the client application (no server) in IPv4 or IPv6 format. If the bank client (your user) uses a browser by which he accesses your server app, we need to know the IP address of his browser. Always provide the closest IP address to the real end-user possible.</param>
        /// <param name="batch_Import_Format">Format of imported batch. For CCT format please use option SEPA-XML.</param>
        /// <param name="batch_Name">Batch name, if not present then will be generated in format `ImportApi_&lt;DDMMYYYY&gt;`.  If the name is longer than 50 characters, it will be truncated</param>
        /// <param name="batch_Combined_Payments">Optional header for combined payments. Payments inside the import file are considered as combined in case the header is present and its value is set to 'true'.</param>
        /// <param name="batch_Autocorrect">Flag if valueDate should be autocorrected in the imported file or not. Autocorrection moved valueDate on first available valid  (working) day. Beware that this may affect if the payment will be sent as instant or not since only payments with valueDate same as actual date (during sending of payment to bank) can be sent as instant.</param>
        /// <returns>New batch with payments created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response12> ImportPaymentsAsync(string x_IBM_Client_Id, string x_Request_Id, string pSU_IP_Address, BatchImportFormat batch_Import_Format, string batch_Name, bool? batch_Combined_Payments, bool? batch_Autocorrect, string request_body, System.Threading.CancellationToken cancellationToken)
        {
            if (request_body == null)
                throw new System.ArgumentNullException("request_body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_IBM_Client_Id == null)
                        throw new System.ArgumentNullException("x_IBM_Client_Id");
                    request_.Headers.TryAddWithoutValidation("X-IBM-Client-Id", ConvertToString(x_IBM_Client_Id, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_Request_Id == null)
                        throw new System.ArgumentNullException("x_Request_Id");
                    request_.Headers.TryAddWithoutValidation("X-Request-Id", ConvertToString(x_Request_Id, System.Globalization.CultureInfo.InvariantCulture));

                    if (pSU_IP_Address != null)
                        request_.Headers.TryAddWithoutValidation("PSU-IP-Address", ConvertToString(pSU_IP_Address, System.Globalization.CultureInfo.InvariantCulture));

                    if (batch_Import_Format == null)
                        throw new System.ArgumentNullException("batch_Import_Format");
                    request_.Headers.TryAddWithoutValidation("Batch-Import-Format", ConvertToString(batch_Import_Format, System.Globalization.CultureInfo.InvariantCulture));

                    if (batch_Name != null)
                        request_.Headers.TryAddWithoutValidation("Batch-Name", ConvertToString(batch_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (batch_Combined_Payments != null)
                        request_.Headers.TryAddWithoutValidation("Batch-Combined-Payments", ConvertToString(batch_Combined_Payments, System.Globalization.CultureInfo.InvariantCulture));

                    if (batch_Autocorrect != null)
                        request_.Headers.TryAddWithoutValidation("Batch-Autocorrect", ConvertToString(batch_Autocorrect, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(request_body);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("text/plain");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rbcz/premium/mock/payments/batches"
                    urlBuilder_.Append("rbcz/premium/mock/payments/batches");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response12>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response13>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response13>("Bad request, validation error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response14>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response14>("Certificate is invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response15>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response15>("No access rights to perform the operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 413)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response16>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response16>("Indicates that the request payload is too large", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 415)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response17>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response17>("Unsupported media type", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response18>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response18>("User has sent too many requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response19>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response19>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Getting details about state of processing of imported batch file and created batch transactions.
        /// <br/>
        /// <br/>All possible batch `status` values are: DRAFT, ERROR, FOR_SIGN, VERIFIED, PASSING_TO_BANK, PASSED, PASSED_TO_BANK_WITH_ERROR, UNDISCLOSED
        /// <br/>
        /// <br/>In production environment the number of requests is limited according to you  subscription plan. Therefore the consumer must be able to handle HTTP responses status 429 (too many requests) in case of exceeding these limits.
        /// </remarks>
        /// <param name="x_IBM_Client_Id">ClientID obtained from Developer Portal - when you registered your app with us.</param>
        /// <param name="x_Request_Id">Unique request id provided by consumer application for reference and auditing.</param>
        /// <param name="pSU_IP_Address">IP address of a client - the end IP address of the client application (no server) in IPv4 or IPv6 format. If the bank client (your user) uses a browser by which he accesses your server app, we need to know the IP address of his browser. Always provide the closest IP address to the real end-user possible.</param>
        /// <param name="batchFileId">Batch file id</param>
        /// <returns>Batch payment detail.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response20> GetBatchDetailAsync(string x_IBM_Client_Id, string x_Request_Id, string pSU_IP_Address, long batchFileId)
        {
            return GetBatchDetailAsync(x_IBM_Client_Id, x_Request_Id, pSU_IP_Address, batchFileId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Getting details about state of processing of imported batch file and created batch transactions.
        /// <br/>
        /// <br/>All possible batch `status` values are: DRAFT, ERROR, FOR_SIGN, VERIFIED, PASSING_TO_BANK, PASSED, PASSED_TO_BANK_WITH_ERROR, UNDISCLOSED
        /// <br/>
        /// <br/>In production environment the number of requests is limited according to you  subscription plan. Therefore the consumer must be able to handle HTTP responses status 429 (too many requests) in case of exceeding these limits.
        /// </remarks>
        /// <param name="x_IBM_Client_Id">ClientID obtained from Developer Portal - when you registered your app with us.</param>
        /// <param name="x_Request_Id">Unique request id provided by consumer application for reference and auditing.</param>
        /// <param name="pSU_IP_Address">IP address of a client - the end IP address of the client application (no server) in IPv4 or IPv6 format. If the bank client (your user) uses a browser by which he accesses your server app, we need to know the IP address of his browser. Always provide the closest IP address to the real end-user possible.</param>
        /// <param name="batchFileId">Batch file id</param>
        /// <returns>Batch payment detail.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response20> GetBatchDetailAsync(string x_IBM_Client_Id, string x_Request_Id, string pSU_IP_Address, long batchFileId, System.Threading.CancellationToken cancellationToken)
        {
            if (batchFileId == null)
                throw new System.ArgumentNullException("batchFileId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_IBM_Client_Id == null)
                        throw new System.ArgumentNullException("x_IBM_Client_Id");
                    request_.Headers.TryAddWithoutValidation("X-IBM-Client-Id", ConvertToString(x_IBM_Client_Id, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_Request_Id == null)
                        throw new System.ArgumentNullException("x_Request_Id");
                    request_.Headers.TryAddWithoutValidation("X-Request-Id", ConvertToString(x_Request_Id, System.Globalization.CultureInfo.InvariantCulture));

                    if (pSU_IP_Address != null)
                        request_.Headers.TryAddWithoutValidation("PSU-IP-Address", ConvertToString(pSU_IP_Address, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rbcz/premium/mock/payments/batches/{batchFileId}"
                    urlBuilder_.Append("rbcz/premium/mock/payments/batches/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(batchFileId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response20>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response21>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response21>("Bad request, validation error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response22>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response22>("Certificate is invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response23>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response23>("No access rights to perform the operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response24>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response24>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response25>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response25>("User has sent too many requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Get list of accounts for given certificate. First page is 1.
        /// <br/>
        /// <br/>In production environment the number of requests is limited according to you  subscription plan. Therefore the consumer must be able to handle HTTP responses status 429 (too many requests) in case of exceeding these limits.
        /// </remarks>
        /// <param name="x_IBM_Client_Id">ClientID obtained from Developer Portal - when you registered your app with us.</param>
        /// <param name="x_Request_Id">Unique request id provided by consumer application for reference and auditing.</param>
        /// <param name="pSU_IP_Address">IP address of a client - the end IP address of the client application (no server) in IPv4 or IPv6 format. If the bank client (your user) uses a browser by which he accesses your server app, we need to know the IP address of his browser. Always provide the closest IP address to the real end-user possible.</param>
        /// <param name="page">Number of the requested page. Default is 1.</param>
        /// <param name="size">Number of items on the page. Default is 15.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response26> GetAccountsAsync(string x_IBM_Client_Id, string x_Request_Id, string pSU_IP_Address, int? page, int? size)
        {
            return GetAccountsAsync(x_IBM_Client_Id, x_Request_Id, pSU_IP_Address, page, size, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Get list of accounts for given certificate. First page is 1.
        /// <br/>
        /// <br/>In production environment the number of requests is limited according to you  subscription plan. Therefore the consumer must be able to handle HTTP responses status 429 (too many requests) in case of exceeding these limits.
        /// </remarks>
        /// <param name="x_IBM_Client_Id">ClientID obtained from Developer Portal - when you registered your app with us.</param>
        /// <param name="x_Request_Id">Unique request id provided by consumer application for reference and auditing.</param>
        /// <param name="pSU_IP_Address">IP address of a client - the end IP address of the client application (no server) in IPv4 or IPv6 format. If the bank client (your user) uses a browser by which he accesses your server app, we need to know the IP address of his browser. Always provide the closest IP address to the real end-user possible.</param>
        /// <param name="page">Number of the requested page. Default is 1.</param>
        /// <param name="size">Number of items on the page. Default is 15.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response26> GetAccountsAsync(string x_IBM_Client_Id, string x_Request_Id, string pSU_IP_Address, int? page, int? size, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_IBM_Client_Id == null)
                        throw new System.ArgumentNullException("x_IBM_Client_Id");
                    request_.Headers.TryAddWithoutValidation("X-IBM-Client-Id", ConvertToString(x_IBM_Client_Id, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_Request_Id == null)
                        throw new System.ArgumentNullException("x_Request_Id");
                    request_.Headers.TryAddWithoutValidation("X-Request-Id", ConvertToString(x_Request_Id, System.Globalization.CultureInfo.InvariantCulture));

                    if (pSU_IP_Address != null)
                        request_.Headers.TryAddWithoutValidation("PSU-IP-Address", ConvertToString(pSU_IP_Address, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rbcz/premium/mock/accounts"
                    urlBuilder_.Append("rbcz/premium/mock/accounts");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response26>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Nonexisting page or empty content.\n", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response27>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response27>("Certificate is invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response28>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response28>("No access rights to perform the operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response29>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response29>("User has sent too many requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Lists statements for all available accounts for which the client has appropriate access rights.
        /// <br/>
        /// <br/>In production environment the number of requests is limited according to you  subscription plan. Therefore the consumer must be able to handle HTTP responses status 429 (too many requests) in case of exceeding these limits.
        /// </remarks>
        /// <param name="x_IBM_Client_Id">ClientID obtained from Developer Portal - when you registered your app with us.</param>
        /// <param name="x_Request_Id">Unique request id provided by consumer application for reference and auditing.</param>
        /// <param name="pSU_IP_Address">IP address of a client - the end IP address of the client application (no server) in IPv4 or IPv6 format. If the bank client (your user) uses a browser by which he accesses your server app, we need to know the IP address of his browser. Always provide the closest IP address to the real end-user possible.</param>
        /// <param name="page">Number of the requested page. Default is 1.</param>
        /// <param name="size">Number of items on the page. Default is 15.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response30> GetStatementsAsync(string x_IBM_Client_Id, string x_Request_Id, string pSU_IP_Address, int? page, int? size, Request_body request_body)
        {
            return GetStatementsAsync(x_IBM_Client_Id, x_Request_Id, pSU_IP_Address, page, size, request_body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Lists statements for all available accounts for which the client has appropriate access rights.
        /// <br/>
        /// <br/>In production environment the number of requests is limited according to you  subscription plan. Therefore the consumer must be able to handle HTTP responses status 429 (too many requests) in case of exceeding these limits.
        /// </remarks>
        /// <param name="x_IBM_Client_Id">ClientID obtained from Developer Portal - when you registered your app with us.</param>
        /// <param name="x_Request_Id">Unique request id provided by consumer application for reference and auditing.</param>
        /// <param name="pSU_IP_Address">IP address of a client - the end IP address of the client application (no server) in IPv4 or IPv6 format. If the bank client (your user) uses a browser by which he accesses your server app, we need to know the IP address of his browser. Always provide the closest IP address to the real end-user possible.</param>
        /// <param name="page">Number of the requested page. Default is 1.</param>
        /// <param name="size">Number of items on the page. Default is 15.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response30> GetStatementsAsync(string x_IBM_Client_Id, string x_Request_Id, string pSU_IP_Address, int? page, int? size, Request_body request_body, System.Threading.CancellationToken cancellationToken)
        {
            if (request_body == null)
                throw new System.ArgumentNullException("request_body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_IBM_Client_Id == null)
                        throw new System.ArgumentNullException("x_IBM_Client_Id");
                    request_.Headers.TryAddWithoutValidation("X-IBM-Client-Id", ConvertToString(x_IBM_Client_Id, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_Request_Id == null)
                        throw new System.ArgumentNullException("x_Request_Id");
                    request_.Headers.TryAddWithoutValidation("X-Request-Id", ConvertToString(x_Request_Id, System.Globalization.CultureInfo.InvariantCulture));

                    if (pSU_IP_Address != null)
                        request_.Headers.TryAddWithoutValidation("PSU-IP-Address", ConvertToString(pSU_IP_Address, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(request_body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rbcz/premium/mock/accounts/statements"
                    urlBuilder_.Append("rbcz/premium/mock/accounts/statements");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response30>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Nonexisting page or empty content.\n", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response31>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response31>("Bad request, validation error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response32>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response32>("Certificate is invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response33>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response33>("No access rights to perform the operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response34>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response34>("Indicates that requested resource does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response35>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response35>("User has sent too many requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Download the selected statement.
        /// <br/>
        /// <br/>Returns one of the following `Content-type` header values depending on  the downloaded document type: &lt;code&gt;application/pdf&lt;/code&gt;, &lt;code&gt;application/xml&lt;/code&gt;, &lt;code&gt;text/mt940&lt;/code&gt;, &lt;code&gt;application/json&lt;/code&gt; (in case of an error).
        /// <br/>
        /// <br/>In production environment the number of requests is limited according to you  subscription plan. Therefore the consumer must be able to handle HTTP responses status 429 (too many requests) in case of exceeding these limits.
        /// </remarks>
        /// <param name="x_IBM_Client_Id">ClientID obtained from Developer Portal - when you registered your app with us.</param>
        /// <param name="x_Request_Id">Unique request id provided by consumer application for reference and auditing.</param>
        /// <param name="accept_Language">The Accept-Language request HTTP header is used to determine document  language. Supported languages are `cs` and `en`.</param>
        /// <param name="pSU_IP_Address">IP address of a client - the end IP address of the client application (no server) in IPv4 or IPv6 format. If the bank client (your user) uses a browser by which he accesses your server app, we need to know the IP address of his browser. Always provide the closest IP address to the real end-user possible.</param>
        /// <returns>Document present and ready for download.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FileResponse> DownloadStatementAsync(string x_IBM_Client_Id, string x_Request_Id, string accept_Language, string pSU_IP_Address, Request_body2 request_body)
        {
            return DownloadStatementAsync(x_IBM_Client_Id, x_Request_Id, accept_Language, pSU_IP_Address, request_body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Download the selected statement.
        /// <br/>
        /// <br/>Returns one of the following `Content-type` header values depending on  the downloaded document type: &lt;code&gt;application/pdf&lt;/code&gt;, &lt;code&gt;application/xml&lt;/code&gt;, &lt;code&gt;text/mt940&lt;/code&gt;, &lt;code&gt;application/json&lt;/code&gt; (in case of an error).
        /// <br/>
        /// <br/>In production environment the number of requests is limited according to you  subscription plan. Therefore the consumer must be able to handle HTTP responses status 429 (too many requests) in case of exceeding these limits.
        /// </remarks>
        /// <param name="x_IBM_Client_Id">ClientID obtained from Developer Portal - when you registered your app with us.</param>
        /// <param name="x_Request_Id">Unique request id provided by consumer application for reference and auditing.</param>
        /// <param name="accept_Language">The Accept-Language request HTTP header is used to determine document  language. Supported languages are `cs` and `en`.</param>
        /// <param name="pSU_IP_Address">IP address of a client - the end IP address of the client application (no server) in IPv4 or IPv6 format. If the bank client (your user) uses a browser by which he accesses your server app, we need to know the IP address of his browser. Always provide the closest IP address to the real end-user possible.</param>
        /// <returns>Document present and ready for download.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FileResponse> DownloadStatementAsync(string x_IBM_Client_Id, string x_Request_Id, string accept_Language, string pSU_IP_Address, Request_body2 request_body, System.Threading.CancellationToken cancellationToken)
        {
            if (request_body == null)
                throw new System.ArgumentNullException("request_body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_IBM_Client_Id == null)
                        throw new System.ArgumentNullException("x_IBM_Client_Id");
                    request_.Headers.TryAddWithoutValidation("X-IBM-Client-Id", ConvertToString(x_IBM_Client_Id, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_Request_Id == null)
                        throw new System.ArgumentNullException("x_Request_Id");
                    request_.Headers.TryAddWithoutValidation("X-Request-Id", ConvertToString(x_Request_Id, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept_Language == null)
                        throw new System.ArgumentNullException("accept_Language");
                    request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));

                    if (pSU_IP_Address != null)
                        request_.Headers.TryAddWithoutValidation("PSU-IP-Address", ConvertToString(pSU_IP_Address, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(request_body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rbcz/premium/mock/accounts/statements/download"
                    urlBuilder_.Append("rbcz/premium/mock/accounts/statements/download");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Nonexisting page or empty content.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response36>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response36>("Bad request, validation error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response37>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response37>("Certificate is invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response38>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response38>("No access rights to perform the operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response39>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response39>("Indicates that requested resource does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response40>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response40>("User has sent too many requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns foreign exchange rates for all available currencies.
        /// <br/>
        /// <br/>In production environment the number of requests is limited according to you  subscription plan. Therefore the consumer must be able to handle HTTP responses status 429 (too many requests) in case of exceeding these limits.
        /// </remarks>
        /// <param name="x_IBM_Client_Id">ClientID obtained from Developer Portal - when you registered your app with us.</param>
        /// <param name="x_Request_Id">Unique request id provided by consumer application for reference and auditing.</param>
        /// <param name="pSU_IP_Address">IP address of a client - the end IP address of the client application (no server) in IPv4 or IPv6 format. If the bank client (your user) uses a browser by which he accesses your server app, we need to know the IP address of his browser. Always provide the closest IP address to the real end-user possible.</param>
        /// <param name="date">The effective date for which the FX rates list is requested. Will default to **now** when not specified.</param>
        /// <returns>Foreign exchange rates for all available currencies.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CurrencyListSimple> GetFxRatesListAsync(string x_IBM_Client_Id, string x_Request_Id, string pSU_IP_Address, System.DateOnly? date)
        {
            return GetFxRatesListAsync(x_IBM_Client_Id, x_Request_Id, pSU_IP_Address, date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns foreign exchange rates for all available currencies.
        /// <br/>
        /// <br/>In production environment the number of requests is limited according to you  subscription plan. Therefore the consumer must be able to handle HTTP responses status 429 (too many requests) in case of exceeding these limits.
        /// </remarks>
        /// <param name="x_IBM_Client_Id">ClientID obtained from Developer Portal - when you registered your app with us.</param>
        /// <param name="x_Request_Id">Unique request id provided by consumer application for reference and auditing.</param>
        /// <param name="pSU_IP_Address">IP address of a client - the end IP address of the client application (no server) in IPv4 or IPv6 format. If the bank client (your user) uses a browser by which he accesses your server app, we need to know the IP address of his browser. Always provide the closest IP address to the real end-user possible.</param>
        /// <param name="date">The effective date for which the FX rates list is requested. Will default to **now** when not specified.</param>
        /// <returns>Foreign exchange rates for all available currencies.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CurrencyListSimple> GetFxRatesListAsync(string x_IBM_Client_Id, string x_Request_Id, string pSU_IP_Address, System.DateOnly? date, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_IBM_Client_Id == null)
                        throw new System.ArgumentNullException("x_IBM_Client_Id");
                    request_.Headers.TryAddWithoutValidation("X-IBM-Client-Id", ConvertToString(x_IBM_Client_Id, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_Request_Id == null)
                        throw new System.ArgumentNullException("x_Request_Id");
                    request_.Headers.TryAddWithoutValidation("X-Request-Id", ConvertToString(x_Request_Id, System.Globalization.CultureInfo.InvariantCulture));

                    if (pSU_IP_Address != null)
                        request_.Headers.TryAddWithoutValidation("PSU-IP-Address", ConvertToString(pSU_IP_Address, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rbcz/premium/mock/fxrates"
                    urlBuilder_.Append("rbcz/premium/mock/fxrates");
                    urlBuilder_.Append('?');
                    if (date != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date")).Append('=').Append(System.Uri.EscapeDataString(date.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CurrencyListSimple>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response41>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response41>("User has sent too many requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns foreign exchange rates for the given currency code.
        /// <br/>
        /// <br/>In production environment the number of requests is limited according to you  subscription plan. Therefore the consumer must be able to handle HTTP responses status 429 (too many requests) in case of exceeding these limits.
        /// </remarks>
        /// <param name="x_IBM_Client_Id">ClientID obtained from Developer Portal - when you registered your app with us.</param>
        /// <param name="x_Request_Id">Unique request id provided by consumer application for reference and auditing.</param>
        /// <param name="pSU_IP_Address">IP address of a client - the end IP address of the client application (no server) in IPv4 or IPv6 format. If the bank client (your user) uses a browser by which he accesses your server app, we need to know the IP address of his browser. Always provide the closest IP address to the real end-user possible.</param>
        /// <param name="currencyCode">The foreign currency code in ISO-4217 format.</param>
        /// <param name="date">The effective date for which the FX rates are requested. Will default to **now** when not specified.</param>
        /// <returns>Foreign exchange rates for the given currency.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CurrencyListSimple> GetFxRatesAsync(string x_IBM_Client_Id, string x_Request_Id, string pSU_IP_Address, string currencyCode, System.DateOnly? date)
        {
            return GetFxRatesAsync(x_IBM_Client_Id, x_Request_Id, pSU_IP_Address, currencyCode, date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns foreign exchange rates for the given currency code.
        /// <br/>
        /// <br/>In production environment the number of requests is limited according to you  subscription plan. Therefore the consumer must be able to handle HTTP responses status 429 (too many requests) in case of exceeding these limits.
        /// </remarks>
        /// <param name="x_IBM_Client_Id">ClientID obtained from Developer Portal - when you registered your app with us.</param>
        /// <param name="x_Request_Id">Unique request id provided by consumer application for reference and auditing.</param>
        /// <param name="pSU_IP_Address">IP address of a client - the end IP address of the client application (no server) in IPv4 or IPv6 format. If the bank client (your user) uses a browser by which he accesses your server app, we need to know the IP address of his browser. Always provide the closest IP address to the real end-user possible.</param>
        /// <param name="currencyCode">The foreign currency code in ISO-4217 format.</param>
        /// <param name="date">The effective date for which the FX rates are requested. Will default to **now** when not specified.</param>
        /// <returns>Foreign exchange rates for the given currency.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CurrencyListSimple> GetFxRatesAsync(string x_IBM_Client_Id, string x_Request_Id, string pSU_IP_Address, string currencyCode, System.DateOnly? date, System.Threading.CancellationToken cancellationToken)
        {
            if (currencyCode == null)
                throw new System.ArgumentNullException("currencyCode");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_IBM_Client_Id == null)
                        throw new System.ArgumentNullException("x_IBM_Client_Id");
                    request_.Headers.TryAddWithoutValidation("X-IBM-Client-Id", ConvertToString(x_IBM_Client_Id, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_Request_Id == null)
                        throw new System.ArgumentNullException("x_Request_Id");
                    request_.Headers.TryAddWithoutValidation("X-Request-Id", ConvertToString(x_Request_Id, System.Globalization.CultureInfo.InvariantCulture));

                    if (pSU_IP_Address != null)
                        request_.Headers.TryAddWithoutValidation("PSU-IP-Address", ConvertToString(pSU_IP_Address, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rbcz/premium/mock/fxrates/{currencyCode}"
                    urlBuilder_.Append("rbcz/premium/mock/fxrates/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(currencyCode, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (date != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date")).Append('=').Append(System.Uri.EscapeDataString(date.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CurrencyListSimple>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response42>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response42>("User has sent too many requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CurrencyListSimple
    {

        [System.Text.Json.Serialization.JsonPropertyName("exchangeRateLists")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ExchangeRateList> ExchangeRateLists { get; set; } = new System.Collections.ObjectModel.Collection<ExchangeRateList>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ExchangeRateList
    {

        [System.Text.Json.Serialization.JsonPropertyName("effectiveDateFrom")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTime EffectiveDateFrom { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("effectiveDateTo")]
        public System.DateTime? EffectiveDateTo { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("tradingDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTime TradingDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ordinalNumber")]
        public int OrdinalNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lastRates")]
        public bool LastRates { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("exchangeRates")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ExchangeRate> ExchangeRates { get; set; } = new System.Collections.ObjectModel.Collection<ExchangeRate>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ExchangeRate
    {

        [System.Text.Json.Serialization.JsonPropertyName("countryFlagPath")]
        public string CountryFlagPath { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("currencyFrom")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
        public string CurrencyFrom { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("currencyTo")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
        public string CurrencyTo { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("exchangeRateBuy")]
        public double ExchangeRateBuy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("exchangeRateBuyCash")]
        public double ExchangeRateBuyCash { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("exchangeRateCenter")]
        public double ExchangeRateCenter { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("exchangeRateCenterChange")]
        public double ExchangeRateCenterChange { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("exchangeRateSell")]
        public double ExchangeRateSell { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("exchangeRateSellCash")]
        public double ExchangeRateSellCash { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("exchangeRateSellCenter")]
        public double ExchangeRateSellCenter { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("exchangeRateSellCenterPrevious")]
        public double ExchangeRateSellCenterPrevious { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("exchangeRateEcbRate")]
        public double? ExchangeRateEcbRate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("exchangeRateEcbVariation")]
        public double? ExchangeRateEcbVariation { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fixedCountryCode")]
        public string FixedCountryCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fixedCountryName")]
        public string FixedCountryName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("quotationType")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string QuotationType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("unitsFrom")]
        public int UnitsFrom { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("variableCountryCode")]
        public string VariableCountryCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("variableCountryName")]
        public string VariableCountryName { get; set; }

    }

    /// <summary>
    /// Format of imported batch. For CCT format please use option SEPA-XML.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum BatchImportFormat
    {

        [System.Runtime.Serialization.EnumMember(Value = @"GEMINI-P11")]
        GEMINIP11 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"GEMINI-P32")]
        GEMINIP32 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"GEMINI-F84")]
        GEMINIF84 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ABO-KPC")]
        ABOKPC = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"SEPA-XML")]
        SEPAXML = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CFD")]
        CFD = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"CFU")]
        CFU = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"CFA")]
        CFA = 7,

    }

    /// <summary>
    /// Request values for list of a statements.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Request_body
    {

        [System.Text.Json.Serialization.JsonPropertyName("accountNumber")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AccountNumber { get; set; }

        /// <summary>
        /// Currency of the requested currency folder.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        public string Currency { get; set; }

        /// <summary>
        /// Statement line identification.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("statementLine")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Request_bodyStatementLine? StatementLine { get; set; }

        /// <summary>
        /// Date limit from.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("dateFrom")]
        public System.DateOnly? DateFrom { get; set; }

        /// <summary>
        /// Date limit to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("dateTo")]
        public System.DateOnly? DateTo { get; set; }

    }

    /// <summary>
    /// Request values for the statement download.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Request_body2
    {
        /// <summary>
        /// Number of the account without prefix and bank code.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("accountNumber")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AccountNumber { get; set; }

        /// <summary>
        /// Currency of the requested currency folder.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        public string Currency { get; set; }

        /// <summary>
        /// Public id of the statement.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("statementId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string StatementId { get; set; }

        /// <summary>
        /// The format of the statement.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("statementFormat")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Request_body2StatementFormat StatementFormat { get; set; }

    }

    /// <summary>
    /// Account with balances
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Response
    {
        /// <summary>
        /// The prefix of the account number
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("numberPart1")]
        public string NumberPart1 { get; set; }

        /// <summary>
        /// The account number without prefix
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("numberPart2")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NumberPart2 { get; set; }

        /// <summary>
        /// The bank clearing code
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string BankCode { get; set; }

        /// <summary>
        /// The available currency folders information.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currencyFolders")]
        public System.Collections.Generic.ICollection<CurrencyFolders> CurrencyFolders { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Response2
    {

        [System.Text.Json.Serialization.JsonPropertyName("error")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response2Error? Error { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("error_description")]
        public string Error_description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Response3
    {

        [System.Text.Json.Serialization.JsonPropertyName("error")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response3Error? Error { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("error_description")]
        public string Error_description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Response4
    {

        [System.Text.Json.Serialization.JsonPropertyName("error")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response4Error? Error { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("error_description")]
        public string Error_description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Response5
    {

        [System.Text.Json.Serialization.JsonPropertyName("error")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response5Error? Error { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("error_description")]
        public string Error_description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Response6
    {
        /// <summary>
        /// Indication wheter the page is last - default false
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastPage")]
        public bool? LastPage { get; set; }

        /// <summary>
        ///  An array of transactions.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("transactions")]
        public Transactions Transactions { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Response7
    {
        /// <summary>
        /// Invalid date. Parameter `from` must not be older than 90 days.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("error")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response7Error? Error { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("error_description")]
        public string Error_description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Response8
    {

        [System.Text.Json.Serialization.JsonPropertyName("error")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response8Error? Error { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("error_description")]
        public string Error_description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Response9
    {

        [System.Text.Json.Serialization.JsonPropertyName("error")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response9Error? Error { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("error_description")]
        public string Error_description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Response10
    {

        [System.Text.Json.Serialization.JsonPropertyName("error")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response10Error? Error { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("error_description")]
        public string Error_description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Response11
    {

        [System.Text.Json.Serialization.JsonPropertyName("error")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response11Error? Error { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("error_description")]
        public string Error_description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Response12
    {
        /// <summary>
        /// ID of created batch file
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("batchFileId")]
        public long? BatchFileId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Response13
    {
        /// <summary>
        /// * INVALID_BATCH_IMPORT_FORMAT - Batch-Import-Format unsupported
        /// <br/>* BATCH_CONTENT_INVALID - Batch content doesn't match to declared Batch-Import-Format
        /// <br/>* BATCH_ALREADY_IMPORTED - Batch has already been imported (based on checksum)
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("error")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response13Error? Error { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("error_description")]
        public string Error_description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Response14
    {

        [System.Text.Json.Serialization.JsonPropertyName("error")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response14Error? Error { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("error_description")]
        public string Error_description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Response15
    {

        [System.Text.Json.Serialization.JsonPropertyName("error")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response15Error? Error { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("error_description")]
        public string Error_description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Response16
    {

        [System.Text.Json.Serialization.JsonPropertyName("error")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response16Error? Error { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("error_description")]
        public string Error_description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Response17
    {

        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public string Error { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("error_description")]
        public string Error_description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Response18
    {

        [System.Text.Json.Serialization.JsonPropertyName("error")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response18Error? Error { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("error_description")]
        public string Error_description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Response19
    {

        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public string Error { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("error_description")]
        public string Error_description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Response20
    {
        /// <summary>
        /// Batch name
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("batchName")]
        public string BatchName { get; set; }

        /// <summary>
        /// Status of batch file import
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("batchFileStatus")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response20BatchFileStatus? BatchFileStatus { get; set; }

        /// <summary>
        /// The date when the batch was created
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createDate")]
        public System.DateOnly? CreateDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("batchItems")]
        public System.Collections.Generic.ICollection<BatchItems> BatchItems { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Response21
    {
        /// <summary>
        /// Invalid input.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("error")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response21Error? Error { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("error_description")]
        public string Error_description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Response22
    {

        [System.Text.Json.Serialization.JsonPropertyName("error")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response22Error? Error { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("error_description")]
        public string Error_description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Response23
    {

        [System.Text.Json.Serialization.JsonPropertyName("error")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response23Error? Error { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("error_description")]
        public string Error_description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Response24
    {

        [System.Text.Json.Serialization.JsonPropertyName("error")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response24Error? Error { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("error_description")]
        public string Error_description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Response25
    {

        [System.Text.Json.Serialization.JsonPropertyName("error")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response25Error? Error { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("error_description")]
        public string Error_description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Response26
    {
        /// <summary>
        /// An array of accounts.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("accounts")]
        public System.Collections.Generic.ICollection<Accounts> Accounts { get; set; }

        /// <summary>
        /// actual returned page
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public int? Page { get; set; }

        /// <summary>
        /// Number of items on the page
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("size")]
        public int? Size { get; set; }

        /// <summary>
        /// true for first page
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("first")]
        public bool? First { get; set; }

        /// <summary>
        /// true for last page
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("last")]
        public bool? Last { get; set; }

        /// <summary>
        /// total number of pages
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int? TotalPages { get; set; }

        /// <summary>
        /// total number of items
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("totalSize")]
        public int? TotalSize { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Response27
    {

        [System.Text.Json.Serialization.JsonPropertyName("error")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response27Error? Error { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("error_description")]
        public string Error_description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Response28
    {

        [System.Text.Json.Serialization.JsonPropertyName("error")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response28Error? Error { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("error_description")]
        public string Error_description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Response29
    {

        [System.Text.Json.Serialization.JsonPropertyName("error")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response29Error? Error { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("error_description")]
        public string Error_description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Response30
    {
        /// <summary>
        /// An array of statements.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("statements")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Statements> Statements { get; set; } = new System.Collections.ObjectModel.Collection<Statements>();

        /// <summary>
        /// Page number.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public int Page { get; set; }

        /// <summary>
        /// Page size.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("size")]
        public int Size { get; set; }

        /// <summary>
        /// Is this the first page?
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("first")]
        public bool First { get; set; }

        /// <summary>
        /// Is this the last page?
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("last")]
        public bool Last { get; set; }

        /// <summary>
        /// Total number of pages.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; set; }

        /// <summary>
        /// Total number of items.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("totalSize")]
        public int TotalSize { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Response31
    {
        /// <summary>
        /// Invalid date.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("error")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response31Error? Error { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("error_description")]
        public string Error_description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Response32
    {

        [System.Text.Json.Serialization.JsonPropertyName("error")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response32Error? Error { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("error_description")]
        public string Error_description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Response33
    {

        [System.Text.Json.Serialization.JsonPropertyName("error")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response33Error? Error { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("error_description")]
        public string Error_description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Response34
    {

        [System.Text.Json.Serialization.JsonPropertyName("error")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response34Error? Error { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("error_description")]
        public string Error_description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Response35
    {

        [System.Text.Json.Serialization.JsonPropertyName("error")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response35Error? Error { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("error_description")]
        public string Error_description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Response36
    {
        /// <summary>
        /// Invalid date.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("error")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response36Error? Error { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("error_description")]
        public string Error_description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Response37
    {

        [System.Text.Json.Serialization.JsonPropertyName("error")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response37Error? Error { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("error_description")]
        public string Error_description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Response38
    {

        [System.Text.Json.Serialization.JsonPropertyName("error")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response38Error? Error { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("error_description")]
        public string Error_description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Response39
    {

        [System.Text.Json.Serialization.JsonPropertyName("error")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response39Error? Error { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("error_description")]
        public string Error_description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Response40
    {

        [System.Text.Json.Serialization.JsonPropertyName("error")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response40Error? Error { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("error_description")]
        public string Error_description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Response41
    {

        [System.Text.Json.Serialization.JsonPropertyName("error")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response41Error? Error { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("error_description")]
        public string Error_description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Response42
    {

        [System.Text.Json.Serialization.JsonPropertyName("error")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response42Error? Error { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("error_description")]
        public string Error_description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Request_bodyStatementLine
    {

        [System.Runtime.Serialization.EnumMember(Value = @"MAIN")]
        MAIN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ADDITIONAL")]
        ADDITIONAL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MT940")]
        MT940 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Request_body2StatementFormat
    {

        [System.Runtime.Serialization.EnumMember(Value = @"pdf")]
        Pdf = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"xml")]
        Xml = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MT940")]
        MT940 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CurrencyFolders
    {
        /// <summary>
        /// The currency of the currency folder
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Currency { get; set; }

        /// <summary>
        /// The status of the currency folder (CATALOG: CURRENCYFOLDERSTATUS)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; }

        /// <summary>
        /// the balances of the currencyFolder
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("balances")]
        public System.Collections.Generic.ICollection<Balances> Balances { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Response2Error
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNAUTHORISED")]
        UNAUTHORISED = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Response3Error
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INSUFFICIENT_RIGHTS")]
        INSUFFICIENT_RIGHTS = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Response4Error
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ID_NOT_FOUND")]
        ID_NOT_FOUND = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Response5Error
    {

        [System.Runtime.Serialization.EnumMember(Value = @"TOO_MANY_REQUESTS")]
        TOO_MANY_REQUESTS = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Transactions
    {

        [System.Text.Json.Serialization.JsonPropertyName("transaction")]
        public System.Collections.Generic.ICollection<Transaction> Transaction { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Response7Error
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DT01")]
        DT01 = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Response8Error
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNAUTHORISED")]
        UNAUTHORISED = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Response9Error
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INSUFFICIENT_RIGHTS")]
        INSUFFICIENT_RIGHTS = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Response10Error
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ID_NOT_FOUND")]
        ID_NOT_FOUND = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Response11Error
    {

        [System.Runtime.Serialization.EnumMember(Value = @"TOO_MANY_REQUESTS")]
        TOO_MANY_REQUESTS = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Response13Error
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_BATCH_IMPORT_FORMAT")]
        INVALID_BATCH_IMPORT_FORMAT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BATCH_CONTENT_INVALID")]
        BATCH_CONTENT_INVALID = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BATCH_ALREADY_IMPORTED")]
        BATCH_ALREADY_IMPORTED = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Response14Error
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNAUTHORISED")]
        UNAUTHORISED = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Response15Error
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INSUFFICIENT_RIGHTS")]
        INSUFFICIENT_RIGHTS = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Response16Error
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BATCH_CONTENT_SIZE_EXCEEDED - Content exceeds maximum of 200 MB")]
        BATCH_CONTENT_SIZE_EXCEEDED__Content_exceeds_maximum_of_200_MB = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Response18Error
    {

        [System.Runtime.Serialization.EnumMember(Value = @"TOO_MANY_REQUESTS")]
        TOO_MANY_REQUESTS = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Response20BatchFileStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DELETED")]
        DELETED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OK")]
        OK = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"UPLOADED")]
        UPLOADED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PROCESSING")]
        PROCESSING = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ERROR")]
        ERROR = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class BatchItems
    {
        /// <summary>
        /// Account info detail
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("accountInfo")]
        public AccountInfo AccountInfo { get; set; }

        /// <summary>
        /// Number of payments within the batch
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("numberOfPayments")]
        public int? NumberOfPayments { get; set; }

        /// <summary>
        /// Sum amount
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("sumAmount")]
        public decimal? SumAmount { get; set; }

        /// <summary>
        /// The currency folder identification (CATALOG: CURRENCIES)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("sumAmountCurrencyId")]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
        public string SumAmountCurrencyId { get; set; }

        /// <summary>
        /// Batch transaction package payment type
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("batchType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public BatchItemsBatchType? BatchType { get; set; }

        /// <summary>
        /// Bacth transaction package status
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public BatchItemsStatus? Status { get; set; }

        /// <summary>
        /// Name of user assigned to batch transaction package
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assignedUserName")]
        public string AssignedUserName { get; set; }

        /// <summary>
        /// Date and time of last change of batch transaction package
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastChangeDateTime")]
        public System.DateTime? LastChangeDateTime { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Response21Error
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DT01")]
        DT01 = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Response22Error
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNAUTHORISED")]
        UNAUTHORISED = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Response23Error
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INSUFFICIENT_RIGHTS")]
        INSUFFICIENT_RIGHTS = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Response24Error
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ID_NOT_FOUND")]
        ID_NOT_FOUND = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Response25Error
    {

        [System.Runtime.Serialization.EnumMember(Value = @"TOO_MANY_REQUESTS")]
        TOO_MANY_REQUESTS = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Accounts
    {
        /// <summary>
        /// The unique internal account id
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("accountId")]
        public int AccountId { get; set; }

        /// <summary>
        /// The account name
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("accountName")]
        public string AccountName { get; set; }

        /// <summary>
        /// The account nick name
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("friendlyName")]
        public string FriendlyName { get; set; }

        /// <summary>
        /// The account number without prefix
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("accountNumber")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AccountNumber { get; set; }

        /// <summary>
        /// The account number prefix
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("accountNumberPrefix")]
        public string AccountNumberPrefix { get; set; }

        /// <summary>
        /// The account number in IBAN format
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("iban")]
        public string Iban { get; set; }

        /// <summary>
        /// The bank clearing code
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string BankCode { get; set; }

        /// <summary>
        /// The bank BIC (SWIFT) code
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankBicCode")]
        public string BankBicCode { get; set; }

        /// <summary>
        /// The main currency of the account
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mainCurrency")]
        public string MainCurrency { get; set; }

        /// <summary>
        /// The account type
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("accountTypeId")]
        public string AccountTypeId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Response27Error
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNAUTHORISED")]
        UNAUTHORISED = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Response28Error
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INSUFFICIENT_RIGHTS")]
        INSUFFICIENT_RIGHTS = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Response29Error
    {

        [System.Runtime.Serialization.EnumMember(Value = @"TOO_MANY_REQUESTS")]
        TOO_MANY_REQUESTS = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Statements
    {
        /// <summary>
        /// public id of the statement
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("statementId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string StatementId { get; set; }

        /// <summary>
        /// account id
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("accountId")]
        public int AccountId { get; set; }

        /// <summary>
        /// number of the statement
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("statementNumber")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string StatementNumber { get; set; }

        /// <summary>
        /// valid date from for statement
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("dateFrom")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateOnly DateFrom { get; set; }

        /// <summary>
        /// valid date to for statement
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("dateTo")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateOnly DateTo { get; set; }

        /// <summary>
        /// currency of the statement
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        public string Currency { get; set; }

        /// <summary>
        /// set of document available formats (always in upper case notation).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("statementFormats")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> StatementFormats { get; set; } = new System.Collections.ObjectModel.Collection<string>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Response31Error
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DT01")]
        DT01 = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Response32Error
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNAUTHORISED")]
        UNAUTHORISED = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Response33Error
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INSUFFICIENT_RIGHTS")]
        INSUFFICIENT_RIGHTS = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Response34Error
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ID_NOT_FOUND")]
        ID_NOT_FOUND = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Response35Error
    {

        [System.Runtime.Serialization.EnumMember(Value = @"TOO_MANY_REQUESTS")]
        TOO_MANY_REQUESTS = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Response36Error
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DT01")]
        DT01 = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Response37Error
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNAUTHORISED")]
        UNAUTHORISED = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Response38Error
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INSUFFICIENT_RIGHTS")]
        INSUFFICIENT_RIGHTS = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Response39Error
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ID_NOT_FOUND")]
        ID_NOT_FOUND = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Response40Error
    {

        [System.Runtime.Serialization.EnumMember(Value = @"TOO_MANY_REQUESTS")]
        TOO_MANY_REQUESTS = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Response41Error
    {

        [System.Runtime.Serialization.EnumMember(Value = @"TOO_MANY_REQUESTS")]
        TOO_MANY_REQUESTS = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum Response42Error
    {

        [System.Runtime.Serialization.EnumMember(Value = @"TOO_MANY_REQUESTS")]
        TOO_MANY_REQUESTS = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Balances
    {
        /// <summary>
        /// the balance type (CODEBOOK: AccountBalanceTypes)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("balanceType")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string BalanceType { get; set; }

        /// <summary>
        /// The currency of the balance
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Currency { get; set; }

        /// <summary>
        /// The balance amount
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public double Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Transaction
    {
        /// <summary>
        /// Unique identification of the realized transaction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("entryReference")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string EntryReference { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount Amount { get; set; } = new Amount();

        [System.Text.Json.Serialization.JsonPropertyName("creditDebitIndication")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public TransactionCreditDebitIndication CreditDebitIndication { get; set; }

        /// <summary>
        /// Date of payment processing/posting by the bank.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bookingDate")]
        public System.DateTime? BookingDate { get; set; }

        /// <summary>
        /// Transaction date; value date; date which is used to count interest; e.g. date when money were withdrawn from ATM.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("valueDate")]
        public System.DateTime? ValueDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("bankTransactionCode")]
        [System.ComponentModel.DataAnnotations.Required]
        public BankTransactionCode BankTransactionCode { get; set; } = new BankTransactionCode();

        [System.Text.Json.Serialization.JsonPropertyName("entryDetails")]
        public EntryDetails EntryDetails { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class AccountInfo
    {
        /// <summary>
        /// Account Id.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("accountId")]
        public long AccountId { get; set; }

        /// <summary>
        /// Charged account number prefix
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("accountNumberPrefix")]
        public string AccountNumberPrefix { get; set; }

        /// <summary>
        /// Charged account number
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("accountNumber")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AccountNumber { get; set; }

        /// <summary>
        /// The currency folder identification (CATALOG: CURRENCIES)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mainCurrencyId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
        public string MainCurrencyId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum BatchItemsBatchType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DPO")]
        DPO = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DD")]
        DD = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FPO")]
        FPO = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SEPA")]
        SEPA = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum BatchItemsStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DRAFT")]
        DRAFT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ERROR")]
        ERROR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FOR_SIGN")]
        FOR_SIGN = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"VERIFIED")]
        VERIFIED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PASSING_TO_BANK")]
        PASSING_TO_BANK = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PASSED")]
        PASSED = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"PASSED_TO_BANK_WITH_ERROR")]
        PASSED_TO_BANK_WITH_ERROR = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"UNDISCLOSED")]
        UNDISCLOSED = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Amount
    {
        /// <summary>
        /// Amount of money
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public double Value { get; set; }

        /// <summary>
        /// Currency code of the amount
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Currency { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum TransactionCreditDebitIndication
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DBIT")]
        DBIT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CRDT")]
        CRDT = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class BankTransactionCode
    {
        /// <summary>
        /// Transaction code in ISO20022 camt.53 format (e.g. 10000101000 - Odchozi tuzemska platba).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class EntryDetails
    {

        [System.Text.Json.Serialization.JsonPropertyName("transactionDetails")]
        public TransactionDetails TransactionDetails { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class TransactionDetails
    {

        [System.Text.Json.Serialization.JsonPropertyName("references")]
        public References References { get; set; }

        /// <summary>
        /// Original amount in original currency - before currency conversion.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("instructedAmount")]
        public InstructedAmount InstructedAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("chargeBearer")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public TransactionDetailsChargeBearer? ChargeBearer { get; set; }

        /// <summary>
        /// Masked payment card number, if the transaction is related to debit card.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("paymentCardNumber")]
        public string PaymentCardNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("relatedParties")]
        public RelatedParties RelatedParties { get; set; }

        /// <summary>
        /// Information that allow match and pairing transactions or further identifies it.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("remittanceInformation")]
        public RemittanceInformation RemittanceInformation { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class References
    {
        /// <summary>
        /// Originator reference ID - End to End ID; The Originator's reference of the transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("endToEndIdentification")]
        public string EndToEndIdentification { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class InstructedAmount
    {
        /// <summary>
        /// Amount of money
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public double Value { get; set; }

        /// <summary>
        /// Currency code of the amount
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Currency { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("exchangeRate")]
        public double? ExchangeRate { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal enum TransactionDetailsChargeBearer
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DEBT")]
        DEBT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CRED")]
        CRED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SHAR")]
        SHAR = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class RelatedParties
    {
        /// <summary>
        /// Information about counter party (debtor or creditor) - always the other side of the transaction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("counterParty")]
        public CounterParty CounterParty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("intermediaryInstitution")]
        public IntermediaryInstitution IntermediaryInstitution { get; set; }

        /// <summary>
        /// Ultimate debtor or Ultimate creditor - always the other end.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ultimateCounterParty")]
        public UltimateCounterParty UltimateCounterParty { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class RemittanceInformation
    {
        /// <summary>
        /// Information from or for counter party. Information for creditor.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("unstructured")]
        public string Unstructured { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("creditorReferenceInformation")]
        public CreditorReferenceInformation CreditorReferenceInformation { get; set; }

        /// <summary>
        /// Private description of the transaction. Only available to account holder.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("originatorMessage")]
        public string OriginatorMessage { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CounterParty
    {
        /// <summary>
        /// Bank account name
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("postalAddress")]
        public PostalAddress PostalAddress { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("organisationIdentification")]
        public OrganisationIdentification OrganisationIdentification { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("account")]
        public Account Account { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class IntermediaryInstitution
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// SWIFT/BIC code of the bank.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bicOrBei")]
        public string BicOrBei { get; set; }

        /// <summary>
        /// Proprietary bank code in local format (e.g. 5500) or in foreign format.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankCode")]
        public string BankCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("postalAddress")]
        public PostalAddress2 PostalAddress { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class UltimateCounterParty
    {
        /// <summary>
        /// Bank account name
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("postalAddress")]
        public PostalAddress3 PostalAddress { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CreditorReferenceInformation
    {
        /// <summary>
        /// Variable symbol
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("variable")]
        public string Variable { get; set; }

        /// <summary>
        /// Constant symbol
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("constant")]
        public string Constant { get; set; }

        /// <summary>
        /// Specific symbol
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("specific")]
        public string Specific { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PostalAddress
    {
        /// <summary>
        /// Street or 2nd line of the address
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("street")]
        public string Street { get; set; }

        /// <summary>
        /// City or 3nd line of the address
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("city")]
        public string City { get; set; }

        /// <summary>
        /// Country code - 4th line of the address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("country")]
        public string Country { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class OrganisationIdentification
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// SWIFT/BIC code of the bank.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bicOrBei")]
        public string BicOrBei { get; set; }

        /// <summary>
        /// Proprietary bank code in local format (e.g. 5500) or in foreign format.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankCode")]
        public string BankCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("postalAddress")]
        public PostalAddress4 PostalAddress { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Account
    {
        /// <summary>
        /// IBAN code of the bank account if available
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("iban")]
        public string Iban { get; set; }

        /// <summary>
        /// Prefix part of the bank account number (only for czech accounts)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("accountNumberPrefix")]
        public string AccountNumberPrefix { get; set; }

        /// <summary>
        /// Base part of the bank account number in czech fromat or in foreign format
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("accountNumber")]
        public string AccountNumber { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PostalAddress2
    {
        /// <summary>
        /// Street or 2nd line of the address
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("street")]
        public string Street { get; set; }

        /// <summary>
        /// City or 3nd line of the address
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("city")]
        public string City { get; set; }

        /// <summary>
        /// Short address
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("shortAddress")]
        public string ShortAddress { get; set; }

        /// <summary>
        /// Country code - 4th line of the address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("country")]
        public string Country { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PostalAddress3
    {
        /// <summary>
        /// Street or 2nd line of the address
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("street")]
        public string Street { get; set; }

        /// <summary>
        /// City or 3nd line of the address
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("city")]
        public string City { get; set; }

        /// <summary>
        /// Country code - 4th line of the address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("country")]
        public string Country { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PostalAddress4
    {
        /// <summary>
        /// Street or 2nd line of the address
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("street")]
        public string Street { get; set; }

        /// <summary>
        /// City or 3nd line of the address
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("city")]
        public string City { get; set; }

        /// <summary>
        /// Short address
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("shortAddress")]
        public string ShortAddress { get; set; }

        /// <summary>
        /// Country code - 4th line of the address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("country")]
        public string Country { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileResponse : System.IDisposable
    {
        private System.IDisposable _client;
        private System.IDisposable _response;

        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public System.IO.Stream Stream { get; private set; }

        public bool IsPartial
        {
            get { return StatusCode == 206; }
        }

        public FileResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable client, System.IDisposable response)
        {
            StatusCode = statusCode;
            Headers = headers;
            Stream = stream;
            _client = client;
            _response = response;
        }

        public void Dispose()
        {
            Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }


    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625