//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

using DSDD.Automations.Payments.RBCZ.PremiumApi;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace DSDD.Automations.Payments.RBCZ.PremiumApi
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Client 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
        private System.Text.Json.JsonSerializerOptions _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public Client(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api.rb.cz/";
            _httpClient = httpClient;
            Initialize();
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <remarks>
        /// Get balance for given accounts.
        /// <br/>
        /// <br/>In production environment the number of requests is limited according to you  subscription plan. Therefore the consumer must be able to handle HTTP responses status 429 (too many requests) in case of exceeding these limits.
        /// </remarks>
        /// <param name="x_IBM_Client_Id">ClientID obtained from Developer Portal - when you registered your app with us.</param>
        /// <param name="x_Request_Id">Unique request id provided by consumer application for reference and auditing.</param>
        /// <param name="pSU_IP_Address">IP address of a client - the end IP address of the client application (no server) in IPv4 or IPv6 format. If the bank client (your user) uses a browser by which he accesses your server app, we need to know the IP address of his browser. Always provide the closest IP address to the real end-user possible.</param>
        /// <param name="accountNumber">The number of account without prefix and bankCode</param>
        /// <returns>Account with currencyFolders and balances.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response> GetBalanceAsync(string x_IBM_Client_Id, string x_Request_Id, string pSU_IP_Address, Environment environment, string accountNumber)
        {
            return GetBalanceAsync(x_IBM_Client_Id, x_Request_Id, pSU_IP_Address, environment, accountNumber, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Get balance for given accounts.
        /// <br/>
        /// <br/>In production environment the number of requests is limited according to you  subscription plan. Therefore the consumer must be able to handle HTTP responses status 429 (too many requests) in case of exceeding these limits.
        /// </remarks>
        /// <param name="x_IBM_Client_Id">ClientID obtained from Developer Portal - when you registered your app with us.</param>
        /// <param name="x_Request_Id">Unique request id provided by consumer application for reference and auditing.</param>
        /// <param name="pSU_IP_Address">IP address of a client - the end IP address of the client application (no server) in IPv4 or IPv6 format. If the bank client (your user) uses a browser by which he accesses your server app, we need to know the IP address of his browser. Always provide the closest IP address to the real end-user possible.</param>
        /// <param name="accountNumber">The number of account without prefix and bankCode</param>
        /// <returns>Account with currencyFolders and balances.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response> GetBalanceAsync(string x_IBM_Client_Id, string x_Request_Id, string pSU_IP_Address, Environment environment, string accountNumber, System.Threading.CancellationToken cancellationToken)
        {
            if (environment == null)
                throw new System.ArgumentNullException("environment");

            if (accountNumber == null)
                throw new System.ArgumentNullException("accountNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_IBM_Client_Id == null)
                        throw new System.ArgumentNullException("x_IBM_Client_Id");
                    request_.Headers.TryAddWithoutValidation("X-IBM-Client-Id", ConvertToString(x_IBM_Client_Id, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_Request_Id == null)
                        throw new System.ArgumentNullException("x_Request_Id");
                    request_.Headers.TryAddWithoutValidation("X-Request-Id", ConvertToString(x_Request_Id, System.Globalization.CultureInfo.InvariantCulture));

                    if (pSU_IP_Address != null)
                        request_.Headers.TryAddWithoutValidation("PSU-IP-Address", ConvertToString(pSU_IP_Address, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rbcz/premium/{environment}/accounts/{accountNumber}/balance"
                    urlBuilder_.Append("rbcz/premium/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(environment, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountNumber, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/balance");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response2>("Certificate\'s serial number is missing or certificate is in an invalid state.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response3>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response3>("Certficate is valid but user has no sufficient rights to access resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response4>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response4>("Indicates that requested resource does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response5>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response5>("User has sent too many requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Get a list of posted transactions (including intraday). In addition, transactions must not be older than **90 days** - see request parameter `from`.
        /// <br/>
        /// <br/>The list is returned as a sequence of pages - see request parameter `page`. The request parameter/flag `lastPage` indicates whether the returned page is the last one or if there are more pages that you can iterate.
        /// <br/>
        /// <br/>In production environment the number of requests is limited according to you  subscription plan. Therefore the consumer must be able to handle HTTP responses status 429 (too many requests) in case of exceeding these limits.
        /// <br/>
        /// <br/>When iterating pages of transactions, your app may need to implement  some delay in order not to break the limit of requests per second.
        /// </remarks>
        /// <param name="x_IBM_Client_Id">ClientID obtained from Developer Portal - when you registered your app with us.</param>
        /// <param name="x_Request_Id">Unique request id provided by consumer application for reference and auditing.</param>
        /// <param name="pSU_IP_Address">IP address of a client - the end IP address of the client application (no server) in IPv4 or IPv6 format. If the bank client (your user) uses a browser by which he accesses your server app, we need to know the IP address of his browser. Always provide the closest IP address to the real end-user possible.</param>
        /// <param name="accountNumber">Account number for which to get list of transactions in national format without 0 padding.</param>
        /// <param name="currencyCode">Currency code of the account in ISO-4217 standard (e.g. czk, eur, usd)</param>
        /// <param name="from">Defines date (and optionally time) from which transactions will be requested. If no time is specified then 00:00:00.0 (Central European  Time) will be used. Example values - 2021-08-01 or 2021-08-01T10:00:00.0Z</param>
        /// <param name="to">Defines date (and optionally time) until which transactions will be requested. If no time is specified then 23:59:59.999 (Central European  Time) will be used. Example values - 2021-08-02 or 2021-08-02T14:00:00.0Z</param>
        /// <param name="page">Page number to be requested. The first page is 1.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response6> GetTransactionListAsync(string x_IBM_Client_Id, string x_Request_Id, string pSU_IP_Address, Environment environment, string accountNumber, string currencyCode, System.DateTime from, System.DateTime to, int? page)
        {
            return GetTransactionListAsync(x_IBM_Client_Id, x_Request_Id, pSU_IP_Address, environment, accountNumber, currencyCode, from, to, page, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Get a list of posted transactions (including intraday). In addition, transactions must not be older than **90 days** - see request parameter `from`.
        /// <br/>
        /// <br/>The list is returned as a sequence of pages - see request parameter `page`. The request parameter/flag `lastPage` indicates whether the returned page is the last one or if there are more pages that you can iterate.
        /// <br/>
        /// <br/>In production environment the number of requests is limited according to you  subscription plan. Therefore the consumer must be able to handle HTTP responses status 429 (too many requests) in case of exceeding these limits.
        /// <br/>
        /// <br/>When iterating pages of transactions, your app may need to implement  some delay in order not to break the limit of requests per second.
        /// </remarks>
        /// <param name="x_IBM_Client_Id">ClientID obtained from Developer Portal - when you registered your app with us.</param>
        /// <param name="x_Request_Id">Unique request id provided by consumer application for reference and auditing.</param>
        /// <param name="pSU_IP_Address">IP address of a client - the end IP address of the client application (no server) in IPv4 or IPv6 format. If the bank client (your user) uses a browser by which he accesses your server app, we need to know the IP address of his browser. Always provide the closest IP address to the real end-user possible.</param>
        /// <param name="accountNumber">Account number for which to get list of transactions in national format without 0 padding.</param>
        /// <param name="currencyCode">Currency code of the account in ISO-4217 standard (e.g. czk, eur, usd)</param>
        /// <param name="from">Defines date (and optionally time) from which transactions will be requested. If no time is specified then 00:00:00.0 (Central European  Time) will be used. Example values - 2021-08-01 or 2021-08-01T10:00:00.0Z</param>
        /// <param name="to">Defines date (and optionally time) until which transactions will be requested. If no time is specified then 23:59:59.999 (Central European  Time) will be used. Example values - 2021-08-02 or 2021-08-02T14:00:00.0Z</param>
        /// <param name="page">Page number to be requested. The first page is 1.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response6> GetTransactionListAsync(string x_IBM_Client_Id, string x_Request_Id, string pSU_IP_Address, Environment environment, string accountNumber, string currencyCode, System.DateTime from, System.DateTime to, int? page, System.Threading.CancellationToken cancellationToken)
        {
            if (environment == null)
                throw new System.ArgumentNullException("environment");

            if (accountNumber == null)
                throw new System.ArgumentNullException("accountNumber");

            if (currencyCode == null)
                throw new System.ArgumentNullException("currencyCode");

            if (from == null)
                throw new System.ArgumentNullException("from");

            if (to == null)
                throw new System.ArgumentNullException("to");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_IBM_Client_Id == null)
                        throw new System.ArgumentNullException("x_IBM_Client_Id");
                    request_.Headers.TryAddWithoutValidation("X-IBM-Client-Id", ConvertToString(x_IBM_Client_Id, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_Request_Id == null)
                        throw new System.ArgumentNullException("x_Request_Id");
                    request_.Headers.TryAddWithoutValidation("X-Request-Id", ConvertToString(x_Request_Id, System.Globalization.CultureInfo.InvariantCulture));

                    if (pSU_IP_Address != null)
                        request_.Headers.TryAddWithoutValidation("PSU-IP-Address", ConvertToString(pSU_IP_Address, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rbcz/premium/{environment}/accounts/{accountNumber}/{currencyCode}/transactions"
                    urlBuilder_.Append("rbcz/premium/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(environment, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountNumber, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(currencyCode, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/transactions");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("from")).Append('=').Append(System.Uri.EscapeDataString(from.ToString("o", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("to")).Append('=').Append(System.Uri.EscapeDataString(to.ToString("o", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response6>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Nonexisting page or empty content.\n", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response7>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response7>("Bad request, validation error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response8>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response8>("Certificate is invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response9>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response9>("No access rights to perform the operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response10>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response10>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response11>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response11>("User has sent too many requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Importing batch payments in one of [supported formates](https://www.rb.cz/attachments/direct-banking/ekomunikator-datova-struktura.pdf) - see request parameter `Batch-Import-Format`.
        /// <br/>
        /// <br/>This is an API alternative to the manual import of batch payments through [Internet Banking](https://www.rb.cz/podnikatele/ucty-a-platebni-styk/prime-bankovnictvi/internetove-bankovnictvi/caste-dotazy/import-hromadnych-plateb).
        /// <br/>
        /// <br/>Imported payments are not immediately processed, they are just loaded into Internet Banking and they still must be authorized/certified in Internet Banking according to client settings of disposable rights and signatures.
        /// <br/>
        /// <br/>Once authorized/certified, uploaded payments will be processed in the Instant payments mode if the following conditions are met&amp;#58;
        /// <br/>1. the batch has no more than 100 payments
        /// <br/>2. no more than 10 batches per day were uploaded
        /// <br/>3. individual payments meet the conditions for Instant payments - see [Instant Payments](https://www.rb.cz/informacni-servis/platebni-styk/tuzemske-platby/okamzite-platby)
        /// <br/>4. on the weekend, only payments within our bank are processed as Instant payments
        /// <br/>
        /// <br/>The number of transactions in one request is limited to 15.000 (this can change without prior notice). The limit is not checked during the call,  it is performed later and a possible error is provided in Internet Banking.
        /// <br/>
        /// <br/>In production environment the number of requests is limited according to you  subscription plan. Therefore the consumer must be able to handle HTTP responses status 429 (too many requests) in case of exceeding these limits.
        /// </remarks>
        /// <param name="x_IBM_Client_Id">ClientID obtained from Developer Portal - when you registered your app with us.</param>
        /// <param name="x_Request_Id">Unique request id provided by consumer application for reference and auditing.</param>
        /// <param name="pSU_IP_Address">IP address of a client - the end IP address of the client application (no server) in IPv4 or IPv6 format. If the bank client (your user) uses a browser by which he accesses your server app, we need to know the IP address of his browser. Always provide the closest IP address to the real end-user possible.</param>
        /// <param name="batch_Import_Format">Format of imported batch. For CCT format please use option SEPA-XML.</param>
        /// <param name="batch_Name">Batch name, if not present then will be generated in format `ImportApi_&lt;DDMMYYYY&gt;`.  If the name is longer than 50 characters, it will be truncated</param>
        /// <param name="batch_Combined_Payments">Optional header for combined payments. Payments inside the import file are considered as combined in case the header is present and its value is set to 'true'.</param>
        /// <param name="batch_Autocorrect">Flag if valueDate should be autocorrected in the imported file or not. Autocorrection moved valueDate on first available valid  (working) day. Beware that this may affect if the payment will be sent as instant or not since only payments with valueDate same as actual date (during sending of payment to bank) can be sent as instant.</param>
        /// <returns>New batch with payments created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response12> ImportPaymentsAsync(string x_IBM_Client_Id, string x_Request_Id, string pSU_IP_Address, BatchImportFormat batch_Import_Format, string batch_Name, bool? batch_Combined_Payments, bool? batch_Autocorrect, Environment environment, string request_body)
        {
            return ImportPaymentsAsync(x_IBM_Client_Id, x_Request_Id, pSU_IP_Address, batch_Import_Format, batch_Name, batch_Combined_Payments, batch_Autocorrect, environment, request_body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Importing batch payments in one of [supported formates](https://www.rb.cz/attachments/direct-banking/ekomunikator-datova-struktura.pdf) - see request parameter `Batch-Import-Format`.
        /// <br/>
        /// <br/>This is an API alternative to the manual import of batch payments through [Internet Banking](https://www.rb.cz/podnikatele/ucty-a-platebni-styk/prime-bankovnictvi/internetove-bankovnictvi/caste-dotazy/import-hromadnych-plateb).
        /// <br/>
        /// <br/>Imported payments are not immediately processed, they are just loaded into Internet Banking and they still must be authorized/certified in Internet Banking according to client settings of disposable rights and signatures.
        /// <br/>
        /// <br/>Once authorized/certified, uploaded payments will be processed in the Instant payments mode if the following conditions are met&amp;#58;
        /// <br/>1. the batch has no more than 100 payments
        /// <br/>2. no more than 10 batches per day were uploaded
        /// <br/>3. individual payments meet the conditions for Instant payments - see [Instant Payments](https://www.rb.cz/informacni-servis/platebni-styk/tuzemske-platby/okamzite-platby)
        /// <br/>4. on the weekend, only payments within our bank are processed as Instant payments
        /// <br/>
        /// <br/>The number of transactions in one request is limited to 15.000 (this can change without prior notice). The limit is not checked during the call,  it is performed later and a possible error is provided in Internet Banking.
        /// <br/>
        /// <br/>In production environment the number of requests is limited according to you  subscription plan. Therefore the consumer must be able to handle HTTP responses status 429 (too many requests) in case of exceeding these limits.
        /// </remarks>
        /// <param name="x_IBM_Client_Id">ClientID obtained from Developer Portal - when you registered your app with us.</param>
        /// <param name="x_Request_Id">Unique request id provided by consumer application for reference and auditing.</param>
        /// <param name="pSU_IP_Address">IP address of a client - the end IP address of the client application (no server) in IPv4 or IPv6 format. If the bank client (your user) uses a browser by which he accesses your server app, we need to know the IP address of his browser. Always provide the closest IP address to the real end-user possible.</param>
        /// <param name="batch_Import_Format">Format of imported batch. For CCT format please use option SEPA-XML.</param>
        /// <param name="batch_Name">Batch name, if not present then will be generated in format `ImportApi_&lt;DDMMYYYY&gt;`.  If the name is longer than 50 characters, it will be truncated</param>
        /// <param name="batch_Combined_Payments">Optional header for combined payments. Payments inside the import file are considered as combined in case the header is present and its value is set to 'true'.</param>
        /// <param name="batch_Autocorrect">Flag if valueDate should be autocorrected in the imported file or not. Autocorrection moved valueDate on first available valid  (working) day. Beware that this may affect if the payment will be sent as instant or not since only payments with valueDate same as actual date (during sending of payment to bank) can be sent as instant.</param>
        /// <returns>New batch with payments created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response12> ImportPaymentsAsync(string x_IBM_Client_Id, string x_Request_Id, string pSU_IP_Address, BatchImportFormat batch_Import_Format, string batch_Name, bool? batch_Combined_Payments, bool? batch_Autocorrect, Environment environment, string request_body, System.Threading.CancellationToken cancellationToken)
        {
            if (environment == null)
                throw new System.ArgumentNullException("environment");

            if (request_body == null)
                throw new System.ArgumentNullException("request_body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_IBM_Client_Id == null)
                        throw new System.ArgumentNullException("x_IBM_Client_Id");
                    request_.Headers.TryAddWithoutValidation("X-IBM-Client-Id", ConvertToString(x_IBM_Client_Id, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_Request_Id == null)
                        throw new System.ArgumentNullException("x_Request_Id");
                    request_.Headers.TryAddWithoutValidation("X-Request-Id", ConvertToString(x_Request_Id, System.Globalization.CultureInfo.InvariantCulture));

                    if (pSU_IP_Address != null)
                        request_.Headers.TryAddWithoutValidation("PSU-IP-Address", ConvertToString(pSU_IP_Address, System.Globalization.CultureInfo.InvariantCulture));

                    if (batch_Import_Format == null)
                        throw new System.ArgumentNullException("batch_Import_Format");
                    request_.Headers.TryAddWithoutValidation("Batch-Import-Format", ConvertToString(batch_Import_Format, System.Globalization.CultureInfo.InvariantCulture));

                    if (batch_Name != null)
                        request_.Headers.TryAddWithoutValidation("Batch-Name", ConvertToString(batch_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (batch_Combined_Payments != null)
                        request_.Headers.TryAddWithoutValidation("Batch-Combined-Payments", ConvertToString(batch_Combined_Payments, System.Globalization.CultureInfo.InvariantCulture));

                    if (batch_Autocorrect != null)
                        request_.Headers.TryAddWithoutValidation("Batch-Autocorrect", ConvertToString(batch_Autocorrect, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(request_body);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("text/plain");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rbcz/premium/{environment}/payments/batches"
                    urlBuilder_.Append("rbcz/premium/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(environment, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/payments/batches");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response12>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response13>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response13>("Bad request, validation error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response14>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response14>("Certificate is invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response15>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response15>("No access rights to perform the operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 413)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response16>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response16>("Indicates that the request payload is too large", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 415)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response17>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response17>("Unsupported media type", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response18>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response18>("User has sent too many requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response19>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response19>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Getting details about state of processing of imported batch file and created batch transactions.
        /// <br/>
        /// <br/>All possible batch `status` values are: DRAFT, ERROR, FOR_SIGN, VERIFIED, PASSING_TO_BANK, PASSED, PASSED_TO_BANK_WITH_ERROR, UNDISCLOSED
        /// <br/>
        /// <br/>In production environment the number of requests is limited according to you  subscription plan. Therefore the consumer must be able to handle HTTP responses status 429 (too many requests) in case of exceeding these limits.
        /// </remarks>
        /// <param name="x_IBM_Client_Id">ClientID obtained from Developer Portal - when you registered your app with us.</param>
        /// <param name="x_Request_Id">Unique request id provided by consumer application for reference and auditing.</param>
        /// <param name="pSU_IP_Address">IP address of a client - the end IP address of the client application (no server) in IPv4 or IPv6 format. If the bank client (your user) uses a browser by which he accesses your server app, we need to know the IP address of his browser. Always provide the closest IP address to the real end-user possible.</param>
        /// <param name="batchFileId">Batch file id</param>
        /// <returns>Batch payment detail.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response20> GetBatchDetailAsync(string x_IBM_Client_Id, string x_Request_Id, string pSU_IP_Address, Environment environment, long batchFileId)
        {
            return GetBatchDetailAsync(x_IBM_Client_Id, x_Request_Id, pSU_IP_Address, environment, batchFileId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Getting details about state of processing of imported batch file and created batch transactions.
        /// <br/>
        /// <br/>All possible batch `status` values are: DRAFT, ERROR, FOR_SIGN, VERIFIED, PASSING_TO_BANK, PASSED, PASSED_TO_BANK_WITH_ERROR, UNDISCLOSED
        /// <br/>
        /// <br/>In production environment the number of requests is limited according to you  subscription plan. Therefore the consumer must be able to handle HTTP responses status 429 (too many requests) in case of exceeding these limits.
        /// </remarks>
        /// <param name="x_IBM_Client_Id">ClientID obtained from Developer Portal - when you registered your app with us.</param>
        /// <param name="x_Request_Id">Unique request id provided by consumer application for reference and auditing.</param>
        /// <param name="pSU_IP_Address">IP address of a client - the end IP address of the client application (no server) in IPv4 or IPv6 format. If the bank client (your user) uses a browser by which he accesses your server app, we need to know the IP address of his browser. Always provide the closest IP address to the real end-user possible.</param>
        /// <param name="batchFileId">Batch file id</param>
        /// <returns>Batch payment detail.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response20> GetBatchDetailAsync(string x_IBM_Client_Id, string x_Request_Id, string pSU_IP_Address, Environment environment, long batchFileId, System.Threading.CancellationToken cancellationToken)
        {
            if (environment == null)
                throw new System.ArgumentNullException("environment");

            if (batchFileId == null)
                throw new System.ArgumentNullException("batchFileId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_IBM_Client_Id == null)
                        throw new System.ArgumentNullException("x_IBM_Client_Id");
                    request_.Headers.TryAddWithoutValidation("X-IBM-Client-Id", ConvertToString(x_IBM_Client_Id, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_Request_Id == null)
                        throw new System.ArgumentNullException("x_Request_Id");
                    request_.Headers.TryAddWithoutValidation("X-Request-Id", ConvertToString(x_Request_Id, System.Globalization.CultureInfo.InvariantCulture));

                    if (pSU_IP_Address != null)
                        request_.Headers.TryAddWithoutValidation("PSU-IP-Address", ConvertToString(pSU_IP_Address, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rbcz/premium/{environment}/payments/batches/{batchFileId}"
                    urlBuilder_.Append("rbcz/premium/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(environment, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/payments/batches/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(batchFileId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response20>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response21>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response21>("Bad request, validation error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response22>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response22>("Certificate is invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response23>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response23>("No access rights to perform the operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response24>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response24>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response25>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response25>("User has sent too many requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Get list of accounts for given certificate. First page is 1.
        /// <br/>
        /// <br/>In production environment the number of requests is limited according to you  subscription plan. Therefore the consumer must be able to handle HTTP responses status 429 (too many requests) in case of exceeding these limits.
        /// </remarks>
        /// <param name="x_IBM_Client_Id">ClientID obtained from Developer Portal - when you registered your app with us.</param>
        /// <param name="x_Request_Id">Unique request id provided by consumer application for reference and auditing.</param>
        /// <param name="pSU_IP_Address">IP address of a client - the end IP address of the client application (no server) in IPv4 or IPv6 format. If the bank client (your user) uses a browser by which he accesses your server app, we need to know the IP address of his browser. Always provide the closest IP address to the real end-user possible.</param>
        /// <param name="page">Number of the requested page. Default is 1.</param>
        /// <param name="size">Number of items on the page. Default is 15.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response26> GetAccountsAsync(string x_IBM_Client_Id, string x_Request_Id, string pSU_IP_Address, Environment environment, int? page, int? size)
        {
            return GetAccountsAsync(x_IBM_Client_Id, x_Request_Id, pSU_IP_Address, environment, page, size, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Get list of accounts for given certificate. First page is 1.
        /// <br/>
        /// <br/>In production environment the number of requests is limited according to you  subscription plan. Therefore the consumer must be able to handle HTTP responses status 429 (too many requests) in case of exceeding these limits.
        /// </remarks>
        /// <param name="x_IBM_Client_Id">ClientID obtained from Developer Portal - when you registered your app with us.</param>
        /// <param name="x_Request_Id">Unique request id provided by consumer application for reference and auditing.</param>
        /// <param name="pSU_IP_Address">IP address of a client - the end IP address of the client application (no server) in IPv4 or IPv6 format. If the bank client (your user) uses a browser by which he accesses your server app, we need to know the IP address of his browser. Always provide the closest IP address to the real end-user possible.</param>
        /// <param name="page">Number of the requested page. Default is 1.</param>
        /// <param name="size">Number of items on the page. Default is 15.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response26> GetAccountsAsync(string x_IBM_Client_Id, string x_Request_Id, string pSU_IP_Address, Environment environment, int? page, int? size, System.Threading.CancellationToken cancellationToken)
        {
            if (environment == null)
                throw new System.ArgumentNullException("environment");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_IBM_Client_Id == null)
                        throw new System.ArgumentNullException("x_IBM_Client_Id");
                    request_.Headers.TryAddWithoutValidation("X-IBM-Client-Id", ConvertToString(x_IBM_Client_Id, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_Request_Id == null)
                        throw new System.ArgumentNullException("x_Request_Id");
                    request_.Headers.TryAddWithoutValidation("X-Request-Id", ConvertToString(x_Request_Id, System.Globalization.CultureInfo.InvariantCulture));

                    if (pSU_IP_Address != null)
                        request_.Headers.TryAddWithoutValidation("PSU-IP-Address", ConvertToString(pSU_IP_Address, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rbcz/premium/{environment}/accounts"
                    urlBuilder_.Append("rbcz/premium/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(environment, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounts");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response26>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Nonexisting page or empty content.\n", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response27>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response27>("Certificate is invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response28>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response28>("No access rights to perform the operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response29>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response29>("User has sent too many requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Lists statements for all available accounts for which the client has appropriate access rights.
        /// <br/>
        /// <br/>In production environment the number of requests is limited according to you  subscription plan. Therefore the consumer must be able to handle HTTP responses status 429 (too many requests) in case of exceeding these limits.
        /// </remarks>
        /// <param name="x_IBM_Client_Id">ClientID obtained from Developer Portal - when you registered your app with us.</param>
        /// <param name="x_Request_Id">Unique request id provided by consumer application for reference and auditing.</param>
        /// <param name="pSU_IP_Address">IP address of a client - the end IP address of the client application (no server) in IPv4 or IPv6 format. If the bank client (your user) uses a browser by which he accesses your server app, we need to know the IP address of his browser. Always provide the closest IP address to the real end-user possible.</param>
        /// <param name="page">Number of the requested page. Default is 1.</param>
        /// <param name="size">Number of items on the page. Default is 15.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response30> GetStatementsAsync(string x_IBM_Client_Id, string x_Request_Id, string pSU_IP_Address, Environment environment, int? page, int? size, Request_body request_body)
        {
            return GetStatementsAsync(x_IBM_Client_Id, x_Request_Id, pSU_IP_Address, environment, page, size, request_body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Lists statements for all available accounts for which the client has appropriate access rights.
        /// <br/>
        /// <br/>In production environment the number of requests is limited according to you  subscription plan. Therefore the consumer must be able to handle HTTP responses status 429 (too many requests) in case of exceeding these limits.
        /// </remarks>
        /// <param name="x_IBM_Client_Id">ClientID obtained from Developer Portal - when you registered your app with us.</param>
        /// <param name="x_Request_Id">Unique request id provided by consumer application for reference and auditing.</param>
        /// <param name="pSU_IP_Address">IP address of a client - the end IP address of the client application (no server) in IPv4 or IPv6 format. If the bank client (your user) uses a browser by which he accesses your server app, we need to know the IP address of his browser. Always provide the closest IP address to the real end-user possible.</param>
        /// <param name="page">Number of the requested page. Default is 1.</param>
        /// <param name="size">Number of items on the page. Default is 15.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response30> GetStatementsAsync(string x_IBM_Client_Id, string x_Request_Id, string pSU_IP_Address, Environment environment, int? page, int? size, Request_body request_body, System.Threading.CancellationToken cancellationToken)
        {
            if (environment == null)
                throw new System.ArgumentNullException("environment");

            if (request_body == null)
                throw new System.ArgumentNullException("request_body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_IBM_Client_Id == null)
                        throw new System.ArgumentNullException("x_IBM_Client_Id");
                    request_.Headers.TryAddWithoutValidation("X-IBM-Client-Id", ConvertToString(x_IBM_Client_Id, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_Request_Id == null)
                        throw new System.ArgumentNullException("x_Request_Id");
                    request_.Headers.TryAddWithoutValidation("X-Request-Id", ConvertToString(x_Request_Id, System.Globalization.CultureInfo.InvariantCulture));

                    if (pSU_IP_Address != null)
                        request_.Headers.TryAddWithoutValidation("PSU-IP-Address", ConvertToString(pSU_IP_Address, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(request_body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rbcz/premium/{environment}/accounts/statements"
                    urlBuilder_.Append("rbcz/premium/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(environment, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounts/statements");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response30>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Nonexisting page or empty content.\n", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response31>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response31>("Bad request, validation error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response32>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response32>("Certificate is invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response33>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response33>("No access rights to perform the operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response34>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response34>("Indicates that requested resource does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response35>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response35>("User has sent too many requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Download the selected statement.
        /// <br/>
        /// <br/>Returns one of the following `Content-type` header values depending on  the downloaded document type: &lt;code&gt;application/pdf&lt;/code&gt;, &lt;code&gt;application/xml&lt;/code&gt;, &lt;code&gt;text/mt940&lt;/code&gt;, &lt;code&gt;application/json&lt;/code&gt; (in case of an error).
        /// <br/>
        /// <br/>In production environment the number of requests is limited according to you  subscription plan. Therefore the consumer must be able to handle HTTP responses status 429 (too many requests) in case of exceeding these limits.
        /// </remarks>
        /// <param name="x_IBM_Client_Id">ClientID obtained from Developer Portal - when you registered your app with us.</param>
        /// <param name="x_Request_Id">Unique request id provided by consumer application for reference and auditing.</param>
        /// <param name="accept_Language">The Accept-Language request HTTP header is used to determine document  language. Supported languages are `cs` and `en`.</param>
        /// <param name="pSU_IP_Address">IP address of a client - the end IP address of the client application (no server) in IPv4 or IPv6 format. If the bank client (your user) uses a browser by which he accesses your server app, we need to know the IP address of his browser. Always provide the closest IP address to the real end-user possible.</param>
        /// <returns>Document present and ready for download.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FileResponse> DownloadStatementAsync(string x_IBM_Client_Id, string x_Request_Id, string accept_Language, string pSU_IP_Address, Environment environment, Request_body2 request_body)
        {
            return DownloadStatementAsync(x_IBM_Client_Id, x_Request_Id, accept_Language, pSU_IP_Address, environment, request_body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Download the selected statement.
        /// <br/>
        /// <br/>Returns one of the following `Content-type` header values depending on  the downloaded document type: &lt;code&gt;application/pdf&lt;/code&gt;, &lt;code&gt;application/xml&lt;/code&gt;, &lt;code&gt;text/mt940&lt;/code&gt;, &lt;code&gt;application/json&lt;/code&gt; (in case of an error).
        /// <br/>
        /// <br/>In production environment the number of requests is limited according to you  subscription plan. Therefore the consumer must be able to handle HTTP responses status 429 (too many requests) in case of exceeding these limits.
        /// </remarks>
        /// <param name="x_IBM_Client_Id">ClientID obtained from Developer Portal - when you registered your app with us.</param>
        /// <param name="x_Request_Id">Unique request id provided by consumer application for reference and auditing.</param>
        /// <param name="accept_Language">The Accept-Language request HTTP header is used to determine document  language. Supported languages are `cs` and `en`.</param>
        /// <param name="pSU_IP_Address">IP address of a client - the end IP address of the client application (no server) in IPv4 or IPv6 format. If the bank client (your user) uses a browser by which he accesses your server app, we need to know the IP address of his browser. Always provide the closest IP address to the real end-user possible.</param>
        /// <returns>Document present and ready for download.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FileResponse> DownloadStatementAsync(string x_IBM_Client_Id, string x_Request_Id, string accept_Language, string pSU_IP_Address, Environment environment, Request_body2 request_body, System.Threading.CancellationToken cancellationToken)
        {
            if (environment == null)
                throw new System.ArgumentNullException("environment");

            if (request_body == null)
                throw new System.ArgumentNullException("request_body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_IBM_Client_Id == null)
                        throw new System.ArgumentNullException("x_IBM_Client_Id");
                    request_.Headers.TryAddWithoutValidation("X-IBM-Client-Id", ConvertToString(x_IBM_Client_Id, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_Request_Id == null)
                        throw new System.ArgumentNullException("x_Request_Id");
                    request_.Headers.TryAddWithoutValidation("X-Request-Id", ConvertToString(x_Request_Id, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept_Language == null)
                        throw new System.ArgumentNullException("accept_Language");
                    request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));

                    if (pSU_IP_Address != null)
                        request_.Headers.TryAddWithoutValidation("PSU-IP-Address", ConvertToString(pSU_IP_Address, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(request_body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rbcz/premium/{environment}/accounts/statements/download"
                    urlBuilder_.Append("rbcz/premium/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(environment, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounts/statements/download");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Nonexisting page or empty content.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response36>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response36>("Bad request, validation error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response37>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response37>("Certificate is invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response38>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response38>("No access rights to perform the operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response39>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response39>("Indicates that requested resource does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response40>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response40>("User has sent too many requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns foreign exchange rates for all available currencies.
        /// <br/>
        /// <br/>In production environment the number of requests is limited according to you  subscription plan. Therefore the consumer must be able to handle HTTP responses status 429 (too many requests) in case of exceeding these limits.
        /// </remarks>
        /// <param name="x_IBM_Client_Id">ClientID obtained from Developer Portal - when you registered your app with us.</param>
        /// <param name="x_Request_Id">Unique request id provided by consumer application for reference and auditing.</param>
        /// <param name="pSU_IP_Address">IP address of a client - the end IP address of the client application (no server) in IPv4 or IPv6 format. If the bank client (your user) uses a browser by which he accesses your server app, we need to know the IP address of his browser. Always provide the closest IP address to the real end-user possible.</param>
        /// <param name="date">The effective date for which the FX rates list is requested. Will default to **now** when not specified.</param>
        /// <returns>Foreign exchange rates for all available currencies.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CurrencyListSimple> GetFxRatesListAsync(string x_IBM_Client_Id, string x_Request_Id, string pSU_IP_Address, Environment environment, System.DateOnly? date)
        {
            return GetFxRatesListAsync(x_IBM_Client_Id, x_Request_Id, pSU_IP_Address, environment, date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns foreign exchange rates for all available currencies.
        /// <br/>
        /// <br/>In production environment the number of requests is limited according to you  subscription plan. Therefore the consumer must be able to handle HTTP responses status 429 (too many requests) in case of exceeding these limits.
        /// </remarks>
        /// <param name="x_IBM_Client_Id">ClientID obtained from Developer Portal - when you registered your app with us.</param>
        /// <param name="x_Request_Id">Unique request id provided by consumer application for reference and auditing.</param>
        /// <param name="pSU_IP_Address">IP address of a client - the end IP address of the client application (no server) in IPv4 or IPv6 format. If the bank client (your user) uses a browser by which he accesses your server app, we need to know the IP address of his browser. Always provide the closest IP address to the real end-user possible.</param>
        /// <param name="date">The effective date for which the FX rates list is requested. Will default to **now** when not specified.</param>
        /// <returns>Foreign exchange rates for all available currencies.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CurrencyListSimple> GetFxRatesListAsync(string x_IBM_Client_Id, string x_Request_Id, string pSU_IP_Address, Environment environment, System.DateOnly? date, System.Threading.CancellationToken cancellationToken)
        {
            if (environment == null)
                throw new System.ArgumentNullException("environment");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_IBM_Client_Id == null)
                        throw new System.ArgumentNullException("x_IBM_Client_Id");
                    request_.Headers.TryAddWithoutValidation("X-IBM-Client-Id", ConvertToString(x_IBM_Client_Id, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_Request_Id == null)
                        throw new System.ArgumentNullException("x_Request_Id");
                    request_.Headers.TryAddWithoutValidation("X-Request-Id", ConvertToString(x_Request_Id, System.Globalization.CultureInfo.InvariantCulture));

                    if (pSU_IP_Address != null)
                        request_.Headers.TryAddWithoutValidation("PSU-IP-Address", ConvertToString(pSU_IP_Address, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rbcz/premium/{environment}/fxrates"
                    urlBuilder_.Append("rbcz/premium/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(environment, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/fxrates");
                    urlBuilder_.Append('?');
                    if (date != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date")).Append('=').Append(System.Uri.EscapeDataString(date.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CurrencyListSimple>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response41>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response41>("User has sent too many requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns foreign exchange rates for the given currency code.
        /// <br/>
        /// <br/>In production environment the number of requests is limited according to you  subscription plan. Therefore the consumer must be able to handle HTTP responses status 429 (too many requests) in case of exceeding these limits.
        /// </remarks>
        /// <param name="x_IBM_Client_Id">ClientID obtained from Developer Portal - when you registered your app with us.</param>
        /// <param name="x_Request_Id">Unique request id provided by consumer application for reference and auditing.</param>
        /// <param name="pSU_IP_Address">IP address of a client - the end IP address of the client application (no server) in IPv4 or IPv6 format. If the bank client (your user) uses a browser by which he accesses your server app, we need to know the IP address of his browser. Always provide the closest IP address to the real end-user possible.</param>
        /// <param name="currencyCode">The foreign currency code in ISO-4217 format.</param>
        /// <param name="date">The effective date for which the FX rates are requested. Will default to **now** when not specified.</param>
        /// <returns>Foreign exchange rates for the given currency.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CurrencyListSimple> GetFxRatesAsync(string x_IBM_Client_Id, string x_Request_Id, string pSU_IP_Address, Environment environment, string currencyCode, System.DateOnly? date)
        {
            return GetFxRatesAsync(x_IBM_Client_Id, x_Request_Id, pSU_IP_Address, environment, currencyCode, date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns foreign exchange rates for the given currency code.
        /// <br/>
        /// <br/>In production environment the number of requests is limited according to you  subscription plan. Therefore the consumer must be able to handle HTTP responses status 429 (too many requests) in case of exceeding these limits.
        /// </remarks>
        /// <param name="x_IBM_Client_Id">ClientID obtained from Developer Portal - when you registered your app with us.</param>
        /// <param name="x_Request_Id">Unique request id provided by consumer application for reference and auditing.</param>
        /// <param name="pSU_IP_Address">IP address of a client - the end IP address of the client application (no server) in IPv4 or IPv6 format. If the bank client (your user) uses a browser by which he accesses your server app, we need to know the IP address of his browser. Always provide the closest IP address to the real end-user possible.</param>
        /// <param name="currencyCode">The foreign currency code in ISO-4217 format.</param>
        /// <param name="date">The effective date for which the FX rates are requested. Will default to **now** when not specified.</param>
        /// <returns>Foreign exchange rates for the given currency.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CurrencyListSimple> GetFxRatesAsync(string x_IBM_Client_Id, string x_Request_Id, string pSU_IP_Address, Environment environment, string currencyCode, System.DateOnly? date, System.Threading.CancellationToken cancellationToken)
        {
            if (environment == null)
                throw new System.ArgumentNullException("environment");

            if (currencyCode == null)
                throw new System.ArgumentNullException("currencyCode");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_IBM_Client_Id == null)
                        throw new System.ArgumentNullException("x_IBM_Client_Id");
                    request_.Headers.TryAddWithoutValidation("X-IBM-Client-Id", ConvertToString(x_IBM_Client_Id, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_Request_Id == null)
                        throw new System.ArgumentNullException("x_Request_Id");
                    request_.Headers.TryAddWithoutValidation("X-Request-Id", ConvertToString(x_Request_Id, System.Globalization.CultureInfo.InvariantCulture));

                    if (pSU_IP_Address != null)
                        request_.Headers.TryAddWithoutValidation("PSU-IP-Address", ConvertToString(pSU_IP_Address, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rbcz/premium/{environment}/fxrates/{currencyCode}"
                    urlBuilder_.Append("rbcz/premium/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(environment, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/fxrates/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(currencyCode, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (date != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date")).Append('=').Append(System.Uri.EscapeDataString(date.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CurrencyListSimple>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response42>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response42>("User has sent too many requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625